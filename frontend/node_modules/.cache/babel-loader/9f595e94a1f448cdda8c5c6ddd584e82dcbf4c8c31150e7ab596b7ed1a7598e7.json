{"ast":null,"code":"import '@tensorflow/tfjs';\n//import(/* webpackPreload: true */ '@tensorflow/tfjs');\n//import(/* webpackChunkName: 'pageA' */ './vendors~main.js')\n\nimport 'regression';\nimport params from './params.mjs';\nimport './dom_util.mjs';\nimport localforage from 'localforage';\nimport TFFaceMesh from './facemesh.mjs';\nimport Reg from './ridgeReg.mjs';\nimport ridgeRegWeighted from './ridgeWeightedReg.mjs';\nimport ridgeRegThreaded from './ridgeRegThreaded.mjs';\nimport util from './util.mjs';\nconst webgazer = {};\nwebgazer.tracker = {};\nwebgazer.tracker.TFFaceMesh = TFFaceMesh;\nwebgazer.reg = Reg;\nwebgazer.reg.RidgeWeightedReg = ridgeRegWeighted.RidgeWeightedReg;\nwebgazer.reg.RidgeRegThreaded = ridgeRegThreaded.RidgeRegThreaded;\nwebgazer.util = util;\nwebgazer.params = params;\n\n//PRIVATE VARIABLES\n\n//video elements\nvar videoStream = null;\nvar videoContainerElement = null;\nvar videoElement = null;\nvar videoElementCanvas = null;\nvar faceOverlay = null;\nvar faceFeedbackBox = null;\nvar gazeDot = null;\n// Why is this not in webgazer.params ?\nvar debugVideoLoc = '';\n\n/*\n * Initialises variables used to store accuracy eigenValues\n * This is used by the calibration example file\n */\nvar xPast50 = new Array(50);\nvar yPast50 = new Array(50);\n\n// loop parameters\nvar clockStart = performance.now();\nvar latestEyeFeatures = null;\nvar latestGazeData = null;\nvar paused = false;\n//registered callback for loop\nvar nopCallback = function (data, time) {};\nvar callback = nopCallback;\n\n//Types that regression systems should handle\n//Describes the source of data so that regression systems may ignore or handle differently the various generating events\nvar eventTypes = ['click', 'move'];\n\n//movelistener timeout clock parameters\nvar moveClock = performance.now();\n//currently used tracker and regression models, defaults to clmtrackr and linear regression\nvar curTracker = new webgazer.tracker.TFFaceMesh();\nvar regs = [new webgazer.reg.RidgeReg()];\n// var blinkDetector = new webgazer.BlinkDetector();\n\n//lookup tables\nvar curTrackerMap = {\n  'TFFacemesh': function () {\n    return new webgazer.tracker.TFFaceMesh();\n  }\n};\nvar regressionMap = {\n  'ridge': function () {\n    return new webgazer.reg.RidgeReg();\n  },\n  'weightedRidge': function () {\n    return new webgazer.reg.RidgeWeightedReg();\n  },\n  'threadedRidge': function () {\n    return new webgazer.reg.RidgeRegThreaded();\n  }\n};\n\n//localstorage name\nvar localstorageDataLabel = 'webgazerGlobalData';\nvar localstorageSettingsLabel = 'webgazerGlobalSettings';\n//settings object for future storage of settings\nvar settings = {};\nvar data = [];\nvar defaults = {\n  'data': [],\n  'settings': {}\n};\n\n//PRIVATE FUNCTIONS\n\n/**\n * Computes the size of the face overlay validation box depending on the size of the video preview window.\n * @returns {Object} The dimensions of the validation box as top, left, width, height.\n */\nwebgazer.computeValidationBoxSize = function () {\n  var vw = videoElement.videoWidth;\n  var vh = videoElement.videoHeight;\n  var pw = parseInt(videoElement.style.width);\n  var ph = parseInt(videoElement.style.height);\n\n  // Find the size of the box.\n  // Pick the smaller of the two video preview sizes\n  var smaller = Math.min(vw, vh);\n  var larger = Math.max(vw, vh);\n\n  // Overall scalar\n  var scalar = vw == larger ? pw / vw : ph / vh;\n\n  // Multiply this by 2/3, then adjust it to the size of the preview\n  var boxSize = smaller * webgazer.params.faceFeedbackBoxRatio * scalar;\n\n  // Set the boundaries of the face overlay validation box based on the preview\n  var topVal = (ph - boxSize) / 2;\n  var leftVal = (pw - boxSize) / 2;\n\n  // top, left, width, height\n  return [topVal, leftVal, boxSize, boxSize];\n};\n\n/**\n * Checks if the pupils are in the position box on the video\n */\nfunction checkEyesInValidationBox() {\n  if (faceFeedbackBox != null && latestEyeFeatures) {\n    var w = videoElement.videoWidth;\n    var h = videoElement.videoHeight;\n\n    // Find the size of the box.\n    // Pick the smaller of the two video preview sizes\n    var smaller = Math.min(w, h);\n    var boxSize = smaller * webgazer.params.faceFeedbackBoxRatio;\n\n    // Set the boundaries of the face overlay validation box based on the preview\n    var topBound = (h - boxSize) / 2;\n    var leftBound = (w - boxSize) / 2;\n    var rightBound = leftBound + boxSize;\n    var bottomBound = topBound + boxSize;\n\n    //get the x and y positions of the left and right eyes\n    var eyeLX = latestEyeFeatures.left.imagex;\n    var eyeLY = latestEyeFeatures.left.imagey;\n    var eyeRX = latestEyeFeatures.right.imagex;\n    var eyeRY = latestEyeFeatures.right.imagey;\n    var xPositions = false;\n    var yPositions = false;\n\n    // check if the x values for the left and right eye are within the\n    // validation box\n    // add the width when comparing against the rightBound (which is the left edge on the preview)\n    if (eyeLX > leftBound && eyeLX + latestEyeFeatures.left.width < rightBound) {\n      if (eyeRX > leftBound && eyeRX + latestEyeFeatures.right.width < rightBound) {\n        xPositions = true;\n      }\n    }\n\n    //check if the y values for the left and right eye are within the\n    //validation box\n    if (eyeLY > topBound && eyeLY + latestEyeFeatures.left.height < bottomBound) {\n      if (eyeRY > topBound && eyeRY + latestEyeFeatures.right.height < bottomBound) {\n        yPositions = true;\n      }\n    }\n\n    //if the x and y values for both the left and right eye are within\n    //the validation box then the box border turns green, otherwise if\n    //the eyes are outside of the box the colour is red\n    if (xPositions && yPositions) {\n      faceFeedbackBox.style.border = 'solid green';\n    } else {\n      faceFeedbackBox.style.border = 'solid red';\n    }\n  } else faceFeedbackBox.style.border = 'solid black';\n}\n\n/**\n * This draws the point (x,y) onto the canvas in the HTML\n * @param {colour} colour - The colour of the circle to plot\n * @param {x} x - The x co-ordinate of the desired point to plot\n * @param {y} y - The y co-ordinate of the desired point to plot\n */\nfunction drawCoordinates(colour, x, y) {\n  var ctx = document.getElementById(\"plotting_canvas\").getContext('2d');\n  ctx.fillStyle = colour; // Red color\n  ctx.beginPath();\n  ctx.arc(x, y, 5, 0, Math.PI * 2, true);\n  ctx.fill();\n}\n\n/**\n * Gets the pupil features by following the pipeline which threads an eyes object through each call:\n * curTracker gets eye patches -> blink detector -> pupil detection\n * @param {Canvas} canvas - a canvas which will have the video drawn onto it\n * @param {Number} width - the width of canvas\n * @param {Number} height - the height of canvas\n */\nfunction getPupilFeatures(canvas, width, height) {\n  if (!canvas) {\n    return;\n  }\n  try {\n    return curTracker.getEyePatches(videoElement, canvas, width, height);\n  } catch (err) {\n    console.log(\"can't get pupil features \", err);\n    return null;\n  }\n}\n\n/**\n * Gets the most current frame of video and paints it to a resized version of the canvas with width and height\n * @param {Canvas} canvas - the canvas to paint the video on to\n * @param {Number} width - the new width of the canvas\n * @param {Number} height - the new height of the canvas\n */\nfunction paintCurrentFrame(canvas, width, height) {\n  if (canvas.width != width) {\n    canvas.width = width;\n  }\n  if (canvas.height != height) {\n    canvas.height = height;\n  }\n  var ctx = canvas.getContext('2d');\n  ctx.drawImage(videoElement, 0, 0, canvas.width, canvas.height);\n}\n\n/**\n * Paints the video to a canvas and runs the prediction pipeline to get a prediction\n * @param {Number|undefined} regModelIndex - The prediction index we're looking for\n * @returns {*}\n */\nasync function getPrediction(regModelIndex) {\n  var predictions = [];\n  // [20200617 xk] TODO: this call should be made async somehow. will take some work.\n  latestEyeFeatures = await getPupilFeatures(videoElementCanvas, videoElementCanvas.width, videoElementCanvas.height);\n  if (regs.length === 0) {\n    console.log('regression not set, call setRegression()');\n    return null;\n  }\n  for (var reg in regs) {\n    predictions.push(regs[reg].predict(latestEyeFeatures));\n  }\n  if (regModelIndex !== undefined) {\n    return predictions[regModelIndex] === null ? null : {\n      'x': predictions[regModelIndex].x,\n      'y': predictions[regModelIndex].y,\n      'eyeFeatures': latestEyeFeatures\n    };\n  } else {\n    return predictions.length === 0 || predictions[0] === null ? null : {\n      'x': predictions[0].x,\n      'y': predictions[0].y,\n      'eyeFeatures': latestEyeFeatures,\n      'all': predictions\n    };\n  }\n}\n\n/**\n * Runs every available animation frame if webgazer is not paused\n */\nvar smoothingVals = new util.DataWindow(4);\nvar k = 0;\nasync function loop() {\n  if (!paused) {\n    // [20200617 XK] TODO: there is currently lag between the camera input and the face overlay. This behavior\n    // is not seen in the facemesh demo. probably need to optimize async implementation. I think the issue lies\n    // in the implementation of getPrediction().\n\n    // Paint the latest video frame into the canvas which will be analyzed by WebGazer\n    // [20180729 JT] Why do we need to do this? clmTracker does this itself _already_, which is just duplicating the work.\n    // Is it because other trackers need a canvas instead of an img/video element?\n    paintCurrentFrame(videoElementCanvas, videoElementCanvas.width, videoElementCanvas.height);\n\n    // Get gaze prediction (ask clm to track; pass the data to the regressor; get back a prediction)\n    latestGazeData = getPrediction();\n    // Count time\n    var elapsedTime = performance.now() - clockStart;\n\n    // Draw face overlay\n    if (webgazer.params.showFaceOverlay) {\n      // Get tracker object\n      var tracker = webgazer.getTracker();\n      faceOverlay.getContext('2d').clearRect(0, 0, videoElement.videoWidth, videoElement.videoHeight);\n      tracker.drawFaceOverlay(faceOverlay.getContext('2d'), tracker.getPositions());\n    }\n\n    // Feedback box\n    // Check that the eyes are inside of the validation box\n    if (webgazer.params.showFaceFeedbackBox) checkEyesInValidationBox();\n    latestGazeData = await latestGazeData;\n\n    // [20200623 xk] callback to function passed into setGazeListener(fn)\n    callback(latestGazeData, elapsedTime);\n    if (latestGazeData) {\n      // [20200608 XK] Smoothing across the most recent 4 predictions, do we need this with Kalman filter?\n      smoothingVals.push(latestGazeData);\n      var x = 0;\n      var y = 0;\n      var len = smoothingVals.length;\n      for (var d in smoothingVals.data) {\n        x += smoothingVals.get(d).x;\n        y += smoothingVals.get(d).y;\n      }\n      var pred = util.bound({\n        'x': x / len,\n        'y': y / len\n      });\n      if (webgazer.params.storingPoints) {\n        drawCoordinates('blue', pred.x, pred.y); //draws the previous predictions\n        //store the position of the past fifty occuring tracker preditions\n        webgazer.storePoints(pred.x, pred.y, k);\n        k++;\n        if (k == 50) {\n          k = 0;\n        }\n      }\n      // GazeDot\n      if (webgazer.params.showGazeDot) {\n        gazeDot.style.display = 'block';\n      }\n      gazeDot.style.transform = 'translate3d(' + pred.x + 'px,' + pred.y + 'px,0)';\n    } else {\n      gazeDot.style.display = 'none';\n    }\n    requestAnimationFrame(loop);\n  }\n}\n\n//is problematic to test\n//because latestEyeFeatures is not set in many cases\n\n/**\n * Records screen position data based on current pupil feature and passes it\n * to the regression model.\n * @param {Number} x - The x screen position\n * @param {Number} y - The y screen position\n * @param {String} eventType - The event type to store\n * @returns {null}\n */\nvar recordScreenPosition = function (x, y, eventType) {\n  if (paused) {\n    return;\n  }\n  if (regs.length === 0) {\n    console.log('regression not set, call setRegression()');\n    return null;\n  }\n  for (var reg in regs) {\n    if (latestEyeFeatures) regs[reg].addData(latestEyeFeatures, [x, y], eventType);\n  }\n};\n\n/**\n * Records click data and passes it to the regression model\n * @param {Event} event - The listened event\n */\nvar clickListener = async function (event) {\n  recordScreenPosition(event.clientX, event.clientY, eventTypes[0]); // eventType[0] === 'click'\n\n  if (webgazer.params.saveDataAcrossSessions) {\n    // Each click stores the next data point into localforage.\n    await setGlobalData();\n\n    // // Debug line\n    // console.log('Model size: ' + JSON.stringify(await localforage.getItem(localstorageDataLabel)).length / 1000000 + 'MB');\n  }\n};\n\n/**\n * Records mouse movement data and passes it to the regression model\n * @param {Event} event - The listened event\n */\nvar moveListener = function (event) {\n  if (paused) {\n    return;\n  }\n  var now = performance.now();\n  if (now < moveClock + webgazer.params.moveTickSize) {\n    return;\n  } else {\n    moveClock = now;\n  }\n  recordScreenPosition(event.clientX, event.clientY, eventTypes[1]); //eventType[1] === 'move'\n};\n\n/**\n * Add event listeners for mouse click and move.\n */\nvar addMouseEventListeners = function () {\n  //third argument set to true so that we get event on 'capture' instead of 'bubbling'\n  //this prevents a client using event.stopPropagation() preventing our access to the click\n  document.addEventListener('click', clickListener, true);\n  document.addEventListener('mousemove', moveListener, true);\n};\n\n/**\n * Remove event listeners for mouse click and move.\n */\nvar removeMouseEventListeners = function () {\n  // must set third argument to same value used in addMouseEventListeners\n  // for this to work.\n  document.removeEventListener('click', clickListener, true);\n  document.removeEventListener('mousemove', moveListener, true);\n};\n\n/**\n * Loads the global data and passes it to the regression model\n */\nasync function loadGlobalData() {\n  // Get settings object from localforage\n  // [20200611 xk] still unsure what this does, maybe would be good for Kalman filter settings etc?\n  settings = await localforage.getItem(localstorageSettingsLabel);\n  settings = settings || defaults;\n\n  // Get click data from localforage\n  var loadData = await localforage.getItem(localstorageDataLabel);\n  loadData = loadData || defaults;\n\n  // Set global var data to newly loaded data\n  data = loadData;\n\n  // Load data into regression model(s)\n  for (var reg in regs) {\n    regs[reg].setData(loadData);\n  }\n  console.log(\"loaded stored data into regression model\");\n}\n\n/**\n * Adds data to localforage\n */\nasync function setGlobalData() {\n  // Grab data from regression model\n  var storeData = regs[0].getData() || data; // Array\n\n  // Store data into localforage\n  localforage.setItem(localstorageSettingsLabel, settings); // [20200605 XK] is 'settings' ever being used?\n  localforage.setItem(localstorageDataLabel, storeData);\n  //TODO data should probably be stored in webgazer object instead of each regression model\n  //     -> requires duplication of data, but is likely easier on regression model implementors\n}\n\n/**\n * Clears data from model and global storage\n */\nfunction clearData() {\n  // Removes data from localforage\n  localforage.clear();\n\n  // Removes data from regression model\n  for (var reg in regs) {\n    regs[reg].init();\n  }\n}\n\n/**\n * Initializes all needed dom elements and begins the loop\n * @param {URL} stream - The video stream to use\n */\nasync function init(stream) {\n  //////////////////////////\n  // Video and video preview\n  //////////////////////////\n  var topDist = '0px';\n  var leftDist = '0px';\n\n  // used for webgazer.stopVideo() and webgazer.setCameraConstraints()\n  videoStream = stream;\n\n  // create a video element container to enable customizable placement on the page\n  videoContainerElement = document.createElement('div');\n  videoContainerElement.id = webgazer.params.videoContainerId;\n  videoContainerElement.style.position = 'fixed';\n  videoContainerElement.style.top = topDist;\n  videoContainerElement.style.left = leftDist;\n  videoContainerElement.style.width = webgazer.params.videoViewerWidth + 'px';\n  videoContainerElement.style.height = webgazer.params.videoViewerHeight + 'px';\n  hideVideoElement(videoContainerElement);\n  videoElement = document.createElement('video');\n  videoElement.setAttribute('playsinline', '');\n  videoElement.id = webgazer.params.videoElementId;\n  videoElement.srcObject = stream;\n  videoElement.autoplay = true;\n  videoElement.style.position = 'absolute';\n  // We set these to stop the video appearing too large when it is added for the very first time\n  videoElement.style.width = webgazer.params.videoViewerWidth + 'px';\n  videoElement.style.height = webgazer.params.videoViewerHeight + 'px';\n  hideVideoElement(videoElement);\n  // videoElement.style.zIndex=\"-1\";\n\n  // Canvas for drawing video to pass to clm tracker\n  videoElementCanvas = document.createElement('canvas');\n  videoElementCanvas.id = webgazer.params.videoElementCanvasId;\n  videoElementCanvas.style.display = 'none';\n\n  // Face overlay\n  // Shows the CLM tracking result\n  faceOverlay = document.createElement('canvas');\n  faceOverlay.id = webgazer.params.faceOverlayId;\n  faceOverlay.style.display = webgazer.params.showFaceOverlay ? 'block' : 'none';\n  faceOverlay.style.position = 'absolute';\n\n  // Mirror video feed\n  if (webgazer.params.mirrorVideo) {\n    videoElement.style.setProperty(\"-moz-transform\", \"scale(-1, 1)\");\n    videoElement.style.setProperty(\"-webkit-transform\", \"scale(-1, 1)\");\n    videoElement.style.setProperty(\"-o-transform\", \"scale(-1, 1)\");\n    videoElement.style.setProperty(\"transform\", \"scale(-1, 1)\");\n    videoElement.style.setProperty(\"filter\", \"FlipH\");\n    faceOverlay.style.setProperty(\"-moz-transform\", \"scale(-1, 1)\");\n    faceOverlay.style.setProperty(\"-webkit-transform\", \"scale(-1, 1)\");\n    faceOverlay.style.setProperty(\"-o-transform\", \"scale(-1, 1)\");\n    faceOverlay.style.setProperty(\"transform\", \"scale(-1, 1)\");\n    faceOverlay.style.setProperty(\"filter\", \"FlipH\");\n  }\n\n  // Feedback box\n  // Lets the user know when their face is in the middle\n  faceFeedbackBox = document.createElement('canvas');\n  faceFeedbackBox.id = webgazer.params.faceFeedbackBoxId;\n  faceFeedbackBox.style.display = webgazer.params.showFaceFeedbackBox ? 'block' : 'none';\n  faceFeedbackBox.style.border = 'solid';\n  faceFeedbackBox.style.position = 'absolute';\n\n  // Gaze dot\n  // Starts offscreen\n  gazeDot = document.createElement('div');\n  gazeDot.id = webgazer.params.gazeDotId;\n  gazeDot.style.display = webgazer.params.showGazeDot ? 'block' : 'none';\n  gazeDot.style.position = 'fixed';\n  gazeDot.style.zIndex = 99999;\n  gazeDot.style.left = '-5px';\n  gazeDot.style.top = '-5px';\n  gazeDot.style.background = 'red';\n  gazeDot.style.borderRadius = '100%';\n  gazeDot.style.opacity = '0.7';\n  gazeDot.style.width = '10px';\n  gazeDot.style.height = '10px';\n\n  // Add other preview/feedback elements to the screen once the video has shown and its parameters are initialized\n  videoContainerElement.appendChild(videoElement);\n  document.body.appendChild(videoContainerElement);\n  const videoPreviewSetup = new Promise(res => {\n    function setupPreviewVideo(e) {\n      // All video preview parts have now been added, so set the size both internally and in the preview window.\n      setInternalVideoBufferSizes(videoElement.videoWidth, videoElement.videoHeight);\n      webgazer.setVideoViewerSize(webgazer.params.videoViewerWidth, webgazer.params.videoViewerHeight);\n      videoContainerElement.appendChild(videoElementCanvas);\n      videoContainerElement.appendChild(faceOverlay);\n      videoContainerElement.appendChild(faceFeedbackBox);\n      document.body.appendChild(gazeDot);\n\n      // Run this only once, so remove the event listener\n      e.target.removeEventListener(e.type, setupPreviewVideo);\n      res();\n    }\n    ;\n    videoElement.addEventListener('loadeddata', setupPreviewVideo);\n  });\n  addMouseEventListeners();\n\n  //BEGIN CALLBACK LOOP\n  paused = false;\n  clockStart = performance.now();\n  await videoPreviewSetup;\n  await loop();\n}\n\n/**\n * Initializes navigator.mediaDevices.getUserMedia\n * depending on the browser capabilities\n *\n * @return Promise\n */\nfunction setUserMediaVariable() {\n  if (navigator.mediaDevices === undefined) {\n    navigator.mediaDevices = {};\n  }\n  if (navigator.mediaDevices.getUserMedia === undefined) {\n    navigator.mediaDevices.getUserMedia = function (constraints) {\n      // gets the alternative old getUserMedia is possible\n      var getUserMedia = navigator.webkitGetUserMedia || navigator.mozGetUserMedia;\n\n      // set an error message if browser doesn't support getUserMedia\n      if (!getUserMedia) {\n        return Promise.reject(new Error(\"Unfortunately, your browser does not support access to the webcam through the getUserMedia API. Try to use the latest version of Google Chrome, Mozilla Firefox, Opera, or Microsoft Edge instead.\"));\n      }\n\n      // uses navigator.getUserMedia for older browsers\n      return new Promise(function (resolve, reject) {\n        getUserMedia.call(navigator, constraints, resolve, reject);\n      });\n    };\n  }\n}\n\n//PUBLIC FUNCTIONS - CONTROL\n\n/**\n * Starts all state related to webgazer -> dataLoop, video collection, click listener\n * If starting fails, call `onFail` param function.\n * @param {Function} onFail - Callback to call in case it is impossible to find user camera\n * @returns {*}\n */\nwebgazer.begin = function (onFail) {\n  if (window.location.protocol !== 'https:' && window.location.hostname !== 'localhost' && window.chrome) {\n    alert(\"WebGazer works only over https. If you are doing local development, you need to run a local server.\");\n  }\n\n  // Load model data stored in localforage.\n  if (webgazer.params.saveDataAcrossSessions) {\n    loadGlobalData();\n  }\n  onFail = onFail || function () {\n    console.log('No stream');\n  };\n  if (debugVideoLoc) {\n    init(debugVideoLoc);\n    return webgazer;\n  }\n\n  ///////////////////////\n  // SETUP VIDEO ELEMENTS\n  // Sets .mediaDevices.getUserMedia depending on browser\n  setUserMediaVariable();\n\n  // Request webcam access under specific constraints\n  // WAIT for access\n  return new Promise(async (resolve, reject) => {\n    let stream;\n    try {\n      stream = await navigator.mediaDevices.getUserMedia(webgazer.params.camConstraints);\n      await init(stream);\n      resolve(webgazer);\n    } catch (err) {\n      onFail();\n      videoElement = null;\n      stream = null;\n      reject(err);\n    }\n  });\n};\n\n/**\n * Checks if webgazer has finished initializing after calling begin()\n * [20180729 JT] This seems like a bad idea for how this function should be implemented.\n * @returns {boolean} if webgazer is ready\n */\nwebgazer.isReady = function () {\n  if (videoElementCanvas === null) {\n    return false;\n  }\n  return videoElementCanvas.width > 0;\n};\n\n/**\n * Stops collection of data and predictions\n * @returns {webgazer} this\n */\nwebgazer.pause = function () {\n  paused = true;\n  return webgazer;\n};\n\n/**\n * Resumes collection of data and predictions if paused\n * @returns {webgazer} this\n */\nwebgazer.resume = async function () {\n  if (!paused) {\n    return webgazer;\n  }\n  paused = false;\n  await loop();\n  return webgazer;\n};\n\n/**\n * stops collection of data and removes dom modifications, must call begin() to reset up\n * @return {webgazer} this\n */\nwebgazer.end = function () {\n  //loop may run an extra time and fail due to removed elements\n  paused = true;\n\n  //webgazer.stopVideo(); // uncomment if you want to stop the video from streaming\n\n  //remove video element and canvas\n  videoContainerElement.remove();\n  gazeDot.remove();\n  return webgazer;\n};\n\n/**\n * Stops the video camera from streaming and removes the video outlines\n * @return {webgazer} this\n */\nwebgazer.stopVideo = function () {\n  // Stops the video from streaming\n  videoStream.getTracks()[0].stop();\n\n  // Removes the outline of the face\n  videoContainerElement.removeChild(faceOverlay);\n\n  // Removes the box around the face\n  videoContainerElement.removeChild(faceFeedbackBox);\n  return webgazer;\n};\n\n//PUBLIC FUNCTIONS - DEBUG\n\n/**\n * Returns if the browser is compatible with webgazer\n * @return {boolean} if browser is compatible\n */\nwebgazer.detectCompatibility = function () {\n  var getUserMedia = navigator.mediaDevices.getUserMedia || navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia;\n  return getUserMedia !== undefined;\n};\n\n/**\n * Set whether to show any of the video previews (camera, face overlay, feedback box).\n * If true: visibility depends on corresponding params (default all true).\n * If false: camera, face overlay, feedback box are all hidden\n * @param {bool} val\n * @return {webgazer} this\n */\nwebgazer.showVideoPreview = function (val) {\n  webgazer.params.showVideoPreview = val;\n  webgazer.showVideo(val && webgazer.params.showVideo);\n  webgazer.showFaceOverlay(val && webgazer.params.showFaceOverlay);\n  webgazer.showFaceFeedbackBox(val && webgazer.params.showFaceFeedbackBox);\n  return webgazer;\n};\n\n/**\n * hides a video element (videoElement or videoContainerElement)\n * uses display = 'none' for all browsers except Safari, which uses opacity = '1'\n * because Safari optimizes out video element if display = 'none'\n * @param {Object} element\n * @return {null}\n */\nfunction hideVideoElement(val) {\n  if (navigator.vendor && navigator.vendor.indexOf('Apple') > -1) {\n    val.style.opacity = webgazer.params.showVideo ? '1' : '0';\n    val.style.display = 'block';\n  } else {\n    val.style.display = webgazer.params.showVideo ? 'block' : 'none';\n  }\n}\n\n/**\n * Set whether the camera video preview is visible or not (default true).\n * @param {*} bool\n * @return {webgazer} this\n */\nwebgazer.showVideo = function (val) {\n  webgazer.params.showVideo = val;\n  if (videoElement) {\n    hideVideoElement(videoElement);\n  }\n  if (videoContainerElement) {\n    hideVideoElement(videoContainerElement);\n  }\n  return webgazer;\n};\n\n/**\n * Set whether the face overlay is visible or not (default true).\n * @param {*} bool\n * @return {webgazer} this\n */\nwebgazer.showFaceOverlay = function (val) {\n  webgazer.params.showFaceOverlay = val;\n  if (faceOverlay) {\n    faceOverlay.style.display = val ? 'block' : 'none';\n  }\n  return webgazer;\n};\n\n/**\n * Set whether the face feedback box is visible or not (default true).\n * @param {*} bool\n * @return {webgazer} this\n */\nwebgazer.showFaceFeedbackBox = function (val) {\n  webgazer.params.showFaceFeedbackBox = val;\n  if (faceFeedbackBox) {\n    faceFeedbackBox.style.display = val ? 'block' : 'none';\n  }\n  return webgazer;\n};\n\n/**\n * Set whether the gaze prediction point(s) are visible or not.\n * Multiple because of a trail of past dots. Default true\n * @return {webgazer} this\n */\nwebgazer.showPredictionPoints = function (val) {\n  webgazer.params.showGazeDot = val;\n  if (gazeDot) {\n    gazeDot.style.display = val ? 'block' : 'none';\n  }\n  return webgazer;\n};\n\n/**\n * Set whether previous calibration data (from localforage) should be loaded.\n * Default true.\n *\n * NOTE: Should be called before webgazer.begin() -- see www/js/main.js for example\n *\n * @param val\n * @returns {webgazer} this\n */\nwebgazer.saveDataAcrossSessions = function (val) {\n  webgazer.params.saveDataAcrossSessions = val;\n  return webgazer;\n};\n\n/**\n * Set whether a Kalman filter will be applied to gaze predictions (default true);\n * @return {webgazer} this\n */\nwebgazer.applyKalmanFilter = function (val) {\n  webgazer.params.applyKalmanFilter = val;\n  return webgazer;\n};\n\n/**\n * Define constraints on the video camera that is used. Useful for non-standard setups.\n * This can be set before calling webgazer.begin(), but also mid stream.\n *\n * @param {Object} constraints Example constraints object:\n * { width: { min: 320, ideal: 1280, max: 1920 }, height: { min: 240, ideal: 720, max: 1080 }, facingMode: \"user\" };\n *\n * Follows definition here:\n * https://developer.mozilla.org/en-US/docs/Web/API/Media_Streams_API/Constraints\n *\n * Note: The constraints set here are applied to the video track only. They also _replace_ any constraints, so be sure to set everything you need.\n * Warning: Setting a large video resolution will decrease performance, and may require\n */\nwebgazer.setCameraConstraints = async function (constraints) {\n  var videoTrack, videoSettings;\n  webgazer.params.camConstraints = constraints;\n\n  // If the camera stream is already up...\n  if (videoStream) {\n    webgazer.pause();\n    videoTrack = videoStream.getVideoTracks()[0];\n    try {\n      await videoTrack.applyConstraints(webgazer.params.camConstraints);\n      videoSettings = videoTrack.getSettings();\n      setInternalVideoBufferSizes(videoSettings.width, videoSettings.height);\n    } catch (err) {\n      console.log(err);\n      return;\n    }\n    // Reset and recompute sizes of the video viewer.\n    // This is only to adjust the feedback box, say, if the aspect ratio of the video has changed.\n    webgazer.setVideoViewerSize(webgazer.params.videoViewerWidth, webgazer.params.videoViewerHeight);\n    webgazer.getTracker().reset();\n    await webgazer.resume();\n  }\n};\n\n/**\n * Does what it says on the tin.\n * @param {*} width\n * @param {*} height\n */\nfunction setInternalVideoBufferSizes(width, height) {\n  // Re-set the canvas size used by the internal processes\n  if (videoElementCanvas) {\n    videoElementCanvas.width = width;\n    videoElementCanvas.height = height;\n  }\n\n  // Re-set the face overlay canvas size\n  if (faceOverlay) {\n    faceOverlay.width = width;\n    faceOverlay.height = height;\n  }\n}\n\n/**\n *  Set a static video file to be used instead of webcam video\n *  @param {String} videoLoc - video file location\n *  @return {webgazer} this\n */\nwebgazer.setStaticVideo = function (videoLoc) {\n  debugVideoLoc = videoLoc;\n  return webgazer;\n};\n\n/**\n * Set the size of the video viewer\n */\nwebgazer.setVideoViewerSize = function (w, h) {\n  webgazer.params.videoViewerWidth = w;\n  webgazer.params.videoViewerHeight = h;\n\n  // Change the video viewer\n  videoElement.style.width = w + 'px';\n  videoElement.style.height = h + 'px';\n\n  // Change video container\n  videoContainerElement.style.width = w + 'px';\n  videoContainerElement.style.height = h + 'px';\n\n  // Change the face overlay\n  faceOverlay.style.width = w + 'px';\n  faceOverlay.style.height = h + 'px';\n\n  // Change the feedback box size\n  // Compute the boundaries of the face overlay validation box based on the video size\n  var tlwh = webgazer.computeValidationBoxSize();\n  // Assign them to the object\n  faceFeedbackBox.style.top = tlwh[0] + 'px';\n  faceFeedbackBox.style.left = tlwh[1] + 'px';\n  faceFeedbackBox.style.width = tlwh[2] + 'px';\n  faceFeedbackBox.style.height = tlwh[3] + 'px';\n};\n\n/**\n *  Add the mouse click and move listeners that add training data.\n *  @return {webgazer} this\n */\nwebgazer.addMouseEventListeners = function () {\n  addMouseEventListeners();\n  return webgazer;\n};\n\n/**\n *  Remove the mouse click and move listeners that add training data.\n *  @return {webgazer} this\n */\nwebgazer.removeMouseEventListeners = function () {\n  removeMouseEventListeners();\n  return webgazer;\n};\n\n/**\n *  Records current screen position for current pupil features.\n *  @param {String} x - position on screen in the x axis\n *  @param {String} y - position on screen in the y axis\n *  @param {String} eventType - \"click\" or \"move\", as per eventTypes\n *  @return {webgazer} this\n */\nwebgazer.recordScreenPosition = function (x, y, eventType) {\n  // give this the same weight that a click gets.\n  recordScreenPosition(x, y, eventType || eventTypes[0]);\n  return webgazer;\n};\n\n/*\n * Stores the position of the fifty most recent tracker preditions\n */\nwebgazer.storePoints = function (x, y, k) {\n  xPast50[k] = x;\n  yPast50[k] = y;\n};\n\n//SETTERS\n/**\n * Sets the tracking module\n * @param {String} name - The name of the tracking module to use\n * @return {webgazer} this\n */\nwebgazer.setTracker = function (name) {\n  if (curTrackerMap[name] === undefined) {\n    console.log('Invalid tracker selection');\n    console.log('Options are: ');\n    for (var t in curTrackerMap) {\n      console.log(t);\n    }\n    return webgazer;\n  }\n  curTracker = curTrackerMap[name]();\n  return webgazer;\n};\n\n/**\n * Sets the regression module and clears any other regression modules\n * @param {String} name - The name of the regression module to use\n * @return {webgazer} this\n */\nwebgazer.setRegression = function (name) {\n  if (regressionMap[name] === undefined) {\n    console.log('Invalid regression selection');\n    console.log('Options are: ');\n    for (var reg in regressionMap) {\n      console.log(reg);\n    }\n    return webgazer;\n  }\n  data = regs[0].getData();\n  regs = [regressionMap[name]()];\n  regs[0].setData(data);\n  return webgazer;\n};\n\n/**\n * Adds a new tracker module so that it can be used by setTracker()\n * @param {String} name - the new name of the tracker\n * @param {Function} constructor - the constructor of the curTracker object\n * @return {webgazer} this\n */\nwebgazer.addTrackerModule = function (name, constructor) {\n  curTrackerMap[name] = function () {\n    return new constructor();\n  };\n};\n\n/**\n * Adds a new regression module so that it can be used by setRegression() and addRegression()\n * @param {String} name - the new name of the regression\n * @param {Function} constructor - the constructor of the regression object\n */\nwebgazer.addRegressionModule = function (name, constructor) {\n  regressionMap[name] = function () {\n    return new constructor();\n  };\n};\n\n/**\n * Adds a new regression module to the list of regression modules, seeding its data from the first regression module\n * @param {String} name - the string name of the regression module to add\n * @return {webgazer} this\n */\nwebgazer.addRegression = function (name) {\n  var newReg = regressionMap[name]();\n  data = regs[0].getData();\n  newReg.setData(data);\n  regs.push(newReg);\n  return webgazer;\n};\n\n/**\n * Sets a callback to be executed on every gaze event (currently all time steps)\n * @param {function} listener - The callback function to call (it must be like function(data, elapsedTime))\n * @return {webgazer} this\n */\nwebgazer.setGazeListener = function (listener) {\n  callback = listener;\n  return webgazer;\n};\n\n/**\n * Removes the callback set by setGazeListener\n * @return {webgazer} this\n */\nwebgazer.clearGazeListener = function () {\n  callback = nopCallback;\n  return webgazer;\n};\n\n/**\n * Set the video element canvas; useful if you want to run WebGazer on your own canvas (e.g., on any random image).\n * @return The current video element canvas\n */\nwebgazer.setVideoElementCanvas = function (canvas) {\n  videoElementCanvas = canvas;\n  return videoElementCanvas;\n};\n\n/**\n * Clear data from localforage and from regs\n */\nwebgazer.clearData = async function () {\n  clearData();\n};\n\n//GETTERS\n/**\n * Returns the tracker currently in use\n * @return {tracker} an object following the tracker interface\n */\nwebgazer.getTracker = function () {\n  return curTracker;\n};\n\n/**\n * Returns the regression currently in use\n * @return {Array.<Object>} an array of regression objects following the regression interface\n */\nwebgazer.getRegression = function () {\n  return regs;\n};\n\n/**\n * Requests an immediate prediction\n * @return {object} prediction data object\n */\nwebgazer.getCurrentPrediction = function (regIndex) {\n  return getPrediction(regIndex);\n};\n\n/**\n * returns the different event types that may be passed to regressions when calling regression.addData()\n * @return {Array} array of strings where each string is an event type\n */\nwebgazer.params.getEventTypes = function () {\n  return eventTypes.slice();\n};\n\n/**\n * Get the video element canvas that WebGazer uses internally on which to run its face tracker.\n * @return The current video element canvas\n */\nwebgazer.getVideoElementCanvas = function () {\n  return videoElementCanvas;\n};\n\n/**\n * @return array [a,b] where a is width ratio and b is height ratio\n */\nwebgazer.getVideoPreviewToCameraResolutionRatio = function () {\n  return [webgazer.params.videoViewerWidth / videoElement.videoWidth, webgazer.params.videoViewerHeight / videoElement.videoHeight];\n};\n\n/*\n * Gets the fifty most recent tracker predictions\n */\nwebgazer.getStoredPoints = function () {\n  return [xPast50, yPast50];\n};\nexport default webgazer;","map":{"version":3,"names":["params","localforage","TFFaceMesh","Reg","ridgeRegWeighted","ridgeRegThreaded","util","webgazer","tracker","reg","RidgeWeightedReg","RidgeRegThreaded","videoStream","videoContainerElement","videoElement","videoElementCanvas","faceOverlay","faceFeedbackBox","gazeDot","debugVideoLoc","xPast50","Array","yPast50","clockStart","performance","now","latestEyeFeatures","latestGazeData","paused","nopCallback","data","time","callback","eventTypes","moveClock","curTracker","regs","RidgeReg","curTrackerMap","TFFacemesh","regressionMap","ridge","weightedRidge","threadedRidge","localstorageDataLabel","localstorageSettingsLabel","settings","defaults","computeValidationBoxSize","vw","videoWidth","vh","videoHeight","pw","parseInt","style","width","ph","height","smaller","Math","min","larger","max","scalar","boxSize","faceFeedbackBoxRatio","topVal","leftVal","checkEyesInValidationBox","w","h","topBound","leftBound","rightBound","bottomBound","eyeLX","left","imagex","eyeLY","imagey","eyeRX","right","eyeRY","xPositions","yPositions","border","drawCoordinates","colour","x","y","ctx","document","getElementById","getContext","fillStyle","beginPath","arc","PI","fill","getPupilFeatures","canvas","getEyePatches","err","console","log","paintCurrentFrame","drawImage","getPrediction","regModelIndex","predictions","length","push","predict","undefined","smoothingVals","DataWindow","k","loop","elapsedTime","showFaceOverlay","getTracker","clearRect","drawFaceOverlay","getPositions","showFaceFeedbackBox","len","d","get","pred","bound","storingPoints","storePoints","showGazeDot","display","transform","requestAnimationFrame","recordScreenPosition","eventType","addData","clickListener","event","clientX","clientY","saveDataAcrossSessions","setGlobalData","moveListener","moveTickSize","addMouseEventListeners","addEventListener","removeMouseEventListeners","removeEventListener","loadGlobalData","getItem","loadData","setData","storeData","getData","setItem","clearData","clear","init","stream","topDist","leftDist","createElement","id","videoContainerId","position","top","videoViewerWidth","videoViewerHeight","hideVideoElement","setAttribute","videoElementId","srcObject","autoplay","videoElementCanvasId","faceOverlayId","mirrorVideo","setProperty","faceFeedbackBoxId","gazeDotId","zIndex","background","borderRadius","opacity","appendChild","body","videoPreviewSetup","Promise","res","setupPreviewVideo","e","setInternalVideoBufferSizes","setVideoViewerSize","target","type","setUserMediaVariable","navigator","mediaDevices","getUserMedia","constraints","webkitGetUserMedia","mozGetUserMedia","reject","Error","resolve","call","begin","onFail","window","location","protocol","hostname","chrome","alert","camConstraints","isReady","pause","resume","end","remove","stopVideo","getTracks","stop","removeChild","detectCompatibility","showVideoPreview","val","showVideo","vendor","indexOf","showPredictionPoints","applyKalmanFilter","setCameraConstraints","videoTrack","videoSettings","getVideoTracks","applyConstraints","getSettings","reset","setStaticVideo","videoLoc","tlwh","setTracker","name","t","setRegression","addTrackerModule","constructor","addRegressionModule","addRegression","newReg","setGazeListener","listener","clearGazeListener","setVideoElementCanvas","getRegression","getCurrentPrediction","regIndex","getEventTypes","slice","getVideoElementCanvas","getVideoPreviewToCameraResolutionRatio","getStoredPoints"],"sources":["/Users/aqwerrrx/Desktop/special1/frontend/node_modules/webgazer/src/index.mjs"],"sourcesContent":["import '@tensorflow/tfjs';\n//import(/* webpackPreload: true */ '@tensorflow/tfjs');\n//import(/* webpackChunkName: 'pageA' */ './vendors~main.js')\n\nimport 'regression';\nimport params from './params.mjs';\nimport './dom_util.mjs';\nimport localforage from 'localforage';\nimport TFFaceMesh from './facemesh.mjs';\nimport Reg from './ridgeReg.mjs';\nimport ridgeRegWeighted from './ridgeWeightedReg.mjs';\nimport ridgeRegThreaded from './ridgeRegThreaded.mjs';\nimport util from './util.mjs';\n\nconst webgazer = {};\nwebgazer.tracker = {};\nwebgazer.tracker.TFFaceMesh = TFFaceMesh;\nwebgazer.reg = Reg;\nwebgazer.reg.RidgeWeightedReg = ridgeRegWeighted.RidgeWeightedReg;\nwebgazer.reg.RidgeRegThreaded = ridgeRegThreaded.RidgeRegThreaded;\nwebgazer.util = util;\nwebgazer.params = params;\n\n//PRIVATE VARIABLES\n\n//video elements\nvar videoStream = null;\nvar videoContainerElement = null;\nvar videoElement = null;\nvar videoElementCanvas = null;\nvar faceOverlay = null;\nvar faceFeedbackBox = null;\nvar gazeDot = null;\n// Why is this not in webgazer.params ?\nvar debugVideoLoc = '';\n\n/*\n * Initialises variables used to store accuracy eigenValues\n * This is used by the calibration example file\n */\nvar xPast50 = new Array(50);\nvar yPast50 = new Array(50);\n\n// loop parameters\nvar clockStart = performance.now();\nvar latestEyeFeatures = null;\nvar latestGazeData = null;\nvar paused = false;\n//registered callback for loop\nvar nopCallback = function(data, time) {};\nvar callback = nopCallback;\n\n//Types that regression systems should handle\n//Describes the source of data so that regression systems may ignore or handle differently the various generating events\nvar eventTypes = ['click', 'move'];\n\n//movelistener timeout clock parameters\nvar moveClock = performance.now();\n//currently used tracker and regression models, defaults to clmtrackr and linear regression\nvar curTracker = new webgazer.tracker.TFFaceMesh();\nvar regs = [new webgazer.reg.RidgeReg()];\n// var blinkDetector = new webgazer.BlinkDetector();\n\n//lookup tables\nvar curTrackerMap = {\n  'TFFacemesh': function() { return new webgazer.tracker.TFFaceMesh(); },\n};\nvar regressionMap = {\n  'ridge': function() { return new webgazer.reg.RidgeReg(); },\n  'weightedRidge': function() { return new webgazer.reg.RidgeWeightedReg(); },\n  'threadedRidge': function() { return new webgazer.reg.RidgeRegThreaded(); },\n};\n\n//localstorage name\nvar localstorageDataLabel = 'webgazerGlobalData';\nvar localstorageSettingsLabel = 'webgazerGlobalSettings';\n//settings object for future storage of settings\nvar settings = {};\nvar data = [];\nvar defaults = {\n  'data': [],\n  'settings': {}\n};\n\n\n//PRIVATE FUNCTIONS\n\n/**\n * Computes the size of the face overlay validation box depending on the size of the video preview window.\n * @returns {Object} The dimensions of the validation box as top, left, width, height.\n */\nwebgazer.computeValidationBoxSize = function() {\n\n  var vw = videoElement.videoWidth;\n  var vh = videoElement.videoHeight;\n  var pw = parseInt(videoElement.style.width);\n  var ph = parseInt(videoElement.style.height);\n\n  // Find the size of the box.\n  // Pick the smaller of the two video preview sizes\n  var smaller = Math.min( vw, vh );\n  var larger  = Math.max( vw, vh );\n\n  // Overall scalar\n  var scalar = ( vw == larger ? pw / vw : ph / vh );\n\n  // Multiply this by 2/3, then adjust it to the size of the preview\n  var boxSize = (smaller * webgazer.params.faceFeedbackBoxRatio) * scalar;\n\n  // Set the boundaries of the face overlay validation box based on the preview\n  var topVal = (ph - boxSize)/2;\n  var leftVal = (pw - boxSize)/2;\n\n  // top, left, width, height\n  return [topVal, leftVal, boxSize, boxSize]\n}\n\n/**\n * Checks if the pupils are in the position box on the video\n */\nfunction checkEyesInValidationBox() {\n\n  if (faceFeedbackBox != null && latestEyeFeatures) {\n    var w = videoElement.videoWidth;\n    var h = videoElement.videoHeight;\n\n    // Find the size of the box.\n    // Pick the smaller of the two video preview sizes\n    var smaller = Math.min( w, h );\n    var boxSize = smaller * webgazer.params.faceFeedbackBoxRatio;\n\n    // Set the boundaries of the face overlay validation box based on the preview\n    var topBound = (h - boxSize)/2;\n    var leftBound = (w - boxSize)/2;\n    var rightBound = leftBound + boxSize;\n    var bottomBound = topBound + boxSize;\n\n    //get the x and y positions of the left and right eyes\n    var eyeLX = latestEyeFeatures.left.imagex;\n    var eyeLY = latestEyeFeatures.left.imagey;\n    var eyeRX = latestEyeFeatures.right.imagex;\n    var eyeRY = latestEyeFeatures.right.imagey;\n\n\n    var xPositions = false;\n    var yPositions = false;\n\n    // check if the x values for the left and right eye are within the\n    // validation box\n    // add the width when comparing against the rightBound (which is the left edge on the preview)\n    if (eyeLX > leftBound && eyeLX + latestEyeFeatures.left.width < rightBound) {\n      if (eyeRX > leftBound && eyeRX + latestEyeFeatures.right.width < rightBound) {\n        xPositions = true;\n      }\n    }\n\n    //check if the y values for the left and right eye are within the\n    //validation box\n    if (eyeLY > topBound && eyeLY + latestEyeFeatures.left.height < bottomBound) {\n      if (eyeRY > topBound && eyeRY + latestEyeFeatures.right.height < bottomBound) {\n        yPositions = true;\n      }\n    }\n\n    //if the x and y values for both the left and right eye are within\n    //the validation box then the box border turns green, otherwise if\n    //the eyes are outside of the box the colour is red\n    if (xPositions && yPositions){\n      faceFeedbackBox.style.border = 'solid green';\n    } else {\n      faceFeedbackBox.style.border = 'solid red';\n    }\n  }\n  else\n    faceFeedbackBox.style.border = 'solid black';\n}\n\n/**\n * This draws the point (x,y) onto the canvas in the HTML\n * @param {colour} colour - The colour of the circle to plot\n * @param {x} x - The x co-ordinate of the desired point to plot\n * @param {y} y - The y co-ordinate of the desired point to plot\n */\nfunction drawCoordinates(colour,x,y){\n  var ctx = document.getElementById(\"plotting_canvas\").getContext('2d');\n  ctx.fillStyle = colour; // Red color\n  ctx.beginPath();\n  ctx.arc(x, y, 5, 0, Math.PI * 2, true);\n  ctx.fill();\n}\n\n/**\n * Gets the pupil features by following the pipeline which threads an eyes object through each call:\n * curTracker gets eye patches -> blink detector -> pupil detection\n * @param {Canvas} canvas - a canvas which will have the video drawn onto it\n * @param {Number} width - the width of canvas\n * @param {Number} height - the height of canvas\n */\nfunction getPupilFeatures(canvas, width, height) {\n  if (!canvas) {\n    return;\n  }\n  try {\n    return curTracker.getEyePatches(videoElement, canvas, width, height);\n  } catch(err) {\n    console.log(\"can't get pupil features \", err);\n    return null;\n  }\n}\n\n/**\n * Gets the most current frame of video and paints it to a resized version of the canvas with width and height\n * @param {Canvas} canvas - the canvas to paint the video on to\n * @param {Number} width - the new width of the canvas\n * @param {Number} height - the new height of the canvas\n */\nfunction paintCurrentFrame(canvas, width, height) {\n  if (canvas.width != width) {\n    canvas.width = width;\n  }\n  if (canvas.height != height) {\n    canvas.height = height;\n  }\n\n  var ctx = canvas.getContext('2d');\n  ctx.drawImage(videoElement, 0, 0, canvas.width, canvas.height);\n}\n\n/**\n * Paints the video to a canvas and runs the prediction pipeline to get a prediction\n * @param {Number|undefined} regModelIndex - The prediction index we're looking for\n * @returns {*}\n */\nasync function getPrediction(regModelIndex) {\n  var predictions = [];\n  // [20200617 xk] TODO: this call should be made async somehow. will take some work.\n  latestEyeFeatures = await getPupilFeatures(videoElementCanvas, videoElementCanvas.width, videoElementCanvas.height);\n\n  if (regs.length === 0) {\n    console.log('regression not set, call setRegression()');\n    return null;\n  }\n  for (var reg in regs) {\n    predictions.push(regs[reg].predict(latestEyeFeatures));\n  }\n  if (regModelIndex !== undefined) {\n    return predictions[regModelIndex] === null ? null : {\n      'x' : predictions[regModelIndex].x,\n      'y' : predictions[regModelIndex].y,\n      'eyeFeatures': latestEyeFeatures\n    };\n  } else {\n    return predictions.length === 0 || predictions[0] === null ? null : {\n      'x' : predictions[0].x,\n      'y' : predictions[0].y,\n      'eyeFeatures': latestEyeFeatures,\n      'all' : predictions\n    };\n  }\n}\n\n/**\n * Runs every available animation frame if webgazer is not paused\n */\nvar smoothingVals = new util.DataWindow(4);\nvar k = 0;\n\nasync function loop() {\n  if (!paused) {\n\n    // [20200617 XK] TODO: there is currently lag between the camera input and the face overlay. This behavior\n    // is not seen in the facemesh demo. probably need to optimize async implementation. I think the issue lies\n    // in the implementation of getPrediction().\n\n    // Paint the latest video frame into the canvas which will be analyzed by WebGazer\n    // [20180729 JT] Why do we need to do this? clmTracker does this itself _already_, which is just duplicating the work.\n    // Is it because other trackers need a canvas instead of an img/video element?\n    paintCurrentFrame(videoElementCanvas, videoElementCanvas.width, videoElementCanvas.height);\n\n    // Get gaze prediction (ask clm to track; pass the data to the regressor; get back a prediction)\n    latestGazeData = getPrediction();\n    // Count time\n    var elapsedTime = performance.now() - clockStart;\n\n    // Draw face overlay\n    if( webgazer.params.showFaceOverlay )\n    {\n      // Get tracker object\n      var tracker = webgazer.getTracker();\n      faceOverlay.getContext('2d').clearRect( 0, 0, videoElement.videoWidth, videoElement.videoHeight);\n      tracker.drawFaceOverlay(faceOverlay.getContext('2d'), tracker.getPositions());\n    }\n\n    // Feedback box\n    // Check that the eyes are inside of the validation box\n    if( webgazer.params.showFaceFeedbackBox )\n      checkEyesInValidationBox();\n\n    latestGazeData = await latestGazeData;\n\n    // [20200623 xk] callback to function passed into setGazeListener(fn)\n    callback(latestGazeData, elapsedTime);\n\n    if( latestGazeData ) {\n      // [20200608 XK] Smoothing across the most recent 4 predictions, do we need this with Kalman filter?\n      smoothingVals.push(latestGazeData);\n      var x = 0;\n      var y = 0;\n      var len = smoothingVals.length;\n      for (var d in smoothingVals.data) {\n        x += smoothingVals.get(d).x;\n        y += smoothingVals.get(d).y;\n      }\n\n      var pred = util.bound({'x':x/len, 'y':y/len});\n\n      if (webgazer.params.storingPoints) {\n        drawCoordinates('blue',pred.x,pred.y); //draws the previous predictions\n        //store the position of the past fifty occuring tracker preditions\n        webgazer.storePoints(pred.x, pred.y, k);\n        k++;\n        if (k == 50) {\n          k = 0;\n        }\n      }\n      // GazeDot\n      if (webgazer.params.showGazeDot) {\n        gazeDot.style.display = 'block';\n      }\n      gazeDot.style.transform = 'translate3d(' + pred.x + 'px,' + pred.y + 'px,0)';\n    } else {\n      gazeDot.style.display = 'none';\n    }\n\n    requestAnimationFrame(loop);\n  }\n}\n\n//is problematic to test\n//because latestEyeFeatures is not set in many cases\n\n/**\n * Records screen position data based on current pupil feature and passes it\n * to the regression model.\n * @param {Number} x - The x screen position\n * @param {Number} y - The y screen position\n * @param {String} eventType - The event type to store\n * @returns {null}\n */\nvar recordScreenPosition = function(x, y, eventType) {\n  if (paused) {\n    return;\n  }\n  if (regs.length === 0) {\n    console.log('regression not set, call setRegression()');\n    return null;\n  }\n  for (var reg in regs) {\n    if( latestEyeFeatures )\n      regs[reg].addData(latestEyeFeatures, [x, y], eventType);\n  }\n};\n\n/**\n * Records click data and passes it to the regression model\n * @param {Event} event - The listened event\n */\nvar clickListener = async function(event) {\n  recordScreenPosition(event.clientX, event.clientY, eventTypes[0]); // eventType[0] === 'click'\n\n  if (webgazer.params.saveDataAcrossSessions) {\n    // Each click stores the next data point into localforage.\n    await setGlobalData();\n\n    // // Debug line\n    // console.log('Model size: ' + JSON.stringify(await localforage.getItem(localstorageDataLabel)).length / 1000000 + 'MB');\n  }\n};\n\n/**\n * Records mouse movement data and passes it to the regression model\n * @param {Event} event - The listened event\n */\nvar moveListener = function(event) {\n  if (paused) {\n    return;\n  }\n\n  var now = performance.now();\n  if (now < moveClock + webgazer.params.moveTickSize) {\n    return;\n  } else {\n    moveClock = now;\n  }\n  recordScreenPosition(event.clientX, event.clientY, eventTypes[1]); //eventType[1] === 'move'\n};\n\n/**\n * Add event listeners for mouse click and move.\n */\nvar addMouseEventListeners = function() {\n  //third argument set to true so that we get event on 'capture' instead of 'bubbling'\n  //this prevents a client using event.stopPropagation() preventing our access to the click\n  document.addEventListener('click', clickListener, true);\n  document.addEventListener('mousemove', moveListener, true);\n};\n\n/**\n * Remove event listeners for mouse click and move.\n */\nvar removeMouseEventListeners = function() {\n  // must set third argument to same value used in addMouseEventListeners\n  // for this to work.\n  document.removeEventListener('click', clickListener, true);\n  document.removeEventListener('mousemove', moveListener, true);\n};\n\n/**\n * Loads the global data and passes it to the regression model\n */\nasync function loadGlobalData() {\n  // Get settings object from localforage\n  // [20200611 xk] still unsure what this does, maybe would be good for Kalman filter settings etc?\n  settings = await localforage.getItem(localstorageSettingsLabel);\n  settings = settings || defaults;\n\n  // Get click data from localforage\n  var loadData = await localforage.getItem(localstorageDataLabel);\n  loadData = loadData || defaults;\n\n  // Set global var data to newly loaded data\n  data = loadData;\n\n  // Load data into regression model(s)\n  for (var reg in regs) {\n    regs[reg].setData(loadData);\n  }\n\n  console.log(\"loaded stored data into regression model\");\n}\n\n/**\n * Adds data to localforage\n */\nasync function setGlobalData() {\n  // Grab data from regression model\n  var storeData = regs[0].getData() || data; // Array\n\n  // Store data into localforage\n  localforage.setItem(localstorageSettingsLabel, settings) // [20200605 XK] is 'settings' ever being used?\n  localforage.setItem(localstorageDataLabel, storeData);\n  //TODO data should probably be stored in webgazer object instead of each regression model\n  //     -> requires duplication of data, but is likely easier on regression model implementors\n}\n\n/**\n * Clears data from model and global storage\n */\nfunction clearData() {\n  // Removes data from localforage\n  localforage.clear();\n\n  // Removes data from regression model\n  for (var reg in regs) {\n    regs[reg].init();\n  }\n}\n\n/**\n * Initializes all needed dom elements and begins the loop\n * @param {URL} stream - The video stream to use\n */\nasync function init(stream) {\n  //////////////////////////\n  // Video and video preview\n  //////////////////////////\n  var topDist = '0px'\n  var leftDist = '0px'\n\n  // used for webgazer.stopVideo() and webgazer.setCameraConstraints()\n  videoStream = stream;\n\n  // create a video element container to enable customizable placement on the page\n  videoContainerElement = document.createElement('div');\n  videoContainerElement.id = webgazer.params.videoContainerId;\n\n  videoContainerElement.style.position = 'fixed';\n  videoContainerElement.style.top = topDist;\n  videoContainerElement.style.left = leftDist;\n  videoContainerElement.style.width = webgazer.params.videoViewerWidth + 'px';\n  videoContainerElement.style.height = webgazer.params.videoViewerHeight + 'px';\n  hideVideoElement(videoContainerElement);\n\n  videoElement = document.createElement('video');\n  videoElement.setAttribute('playsinline', '');\n  videoElement.id = webgazer.params.videoElementId;\n  videoElement.srcObject = stream;\n  videoElement.autoplay = true;\n  videoElement.style.position = 'absolute';\n  // We set these to stop the video appearing too large when it is added for the very first time\n  videoElement.style.width = webgazer.params.videoViewerWidth + 'px';\n  videoElement.style.height = webgazer.params.videoViewerHeight + 'px';\n  hideVideoElement(videoElement);\n  // videoElement.style.zIndex=\"-1\";\n\n  // Canvas for drawing video to pass to clm tracker\n  videoElementCanvas = document.createElement('canvas');\n  videoElementCanvas.id = webgazer.params.videoElementCanvasId;\n  videoElementCanvas.style.display = 'none';\n\n  // Face overlay\n  // Shows the CLM tracking result\n  faceOverlay = document.createElement('canvas');\n  faceOverlay.id = webgazer.params.faceOverlayId;\n  faceOverlay.style.display = webgazer.params.showFaceOverlay ? 'block' : 'none';\n  faceOverlay.style.position = 'absolute';\n\n  // Mirror video feed\n  if (webgazer.params.mirrorVideo) {\n    videoElement.style.setProperty(\"-moz-transform\", \"scale(-1, 1)\");\n    videoElement.style.setProperty(\"-webkit-transform\", \"scale(-1, 1)\");\n    videoElement.style.setProperty(\"-o-transform\", \"scale(-1, 1)\");\n    videoElement.style.setProperty(\"transform\", \"scale(-1, 1)\");\n    videoElement.style.setProperty(\"filter\", \"FlipH\");\n    faceOverlay.style.setProperty(\"-moz-transform\", \"scale(-1, 1)\");\n    faceOverlay.style.setProperty(\"-webkit-transform\", \"scale(-1, 1)\");\n    faceOverlay.style.setProperty(\"-o-transform\", \"scale(-1, 1)\");\n    faceOverlay.style.setProperty(\"transform\", \"scale(-1, 1)\");\n    faceOverlay.style.setProperty(\"filter\", \"FlipH\");\n  }\n\n  // Feedback box\n  // Lets the user know when their face is in the middle\n  faceFeedbackBox = document.createElement('canvas');\n  faceFeedbackBox.id = webgazer.params.faceFeedbackBoxId;\n  faceFeedbackBox.style.display = webgazer.params.showFaceFeedbackBox ? 'block' : 'none';\n  faceFeedbackBox.style.border = 'solid';\n  faceFeedbackBox.style.position = 'absolute';\n\n  // Gaze dot\n  // Starts offscreen\n  gazeDot = document.createElement('div');\n  gazeDot.id = webgazer.params.gazeDotId;\n  gazeDot.style.display = webgazer.params.showGazeDot ? 'block' : 'none';\n  gazeDot.style.position = 'fixed';\n  gazeDot.style.zIndex = 99999;\n  gazeDot.style.left = '-5px';\n  gazeDot.style.top  = '-5px';\n  gazeDot.style.background = 'red';\n  gazeDot.style.borderRadius = '100%';\n  gazeDot.style.opacity = '0.7';\n  gazeDot.style.width = '10px';\n  gazeDot.style.height = '10px';\n\n  // Add other preview/feedback elements to the screen once the video has shown and its parameters are initialized\n  videoContainerElement.appendChild(videoElement);\n  document.body.appendChild(videoContainerElement);\n  const videoPreviewSetup = new Promise((res) => {\n    function setupPreviewVideo(e) {\n\n      // All video preview parts have now been added, so set the size both internally and in the preview window.\n      setInternalVideoBufferSizes( videoElement.videoWidth, videoElement.videoHeight );\n      webgazer.setVideoViewerSize( webgazer.params.videoViewerWidth, webgazer.params.videoViewerHeight );\n\n      videoContainerElement.appendChild(videoElementCanvas);\n      videoContainerElement.appendChild(faceOverlay);\n      videoContainerElement.appendChild(faceFeedbackBox);\n      document.body.appendChild(gazeDot);\n\n      // Run this only once, so remove the event listener\n      e.target.removeEventListener(e.type, setupPreviewVideo);\n      res();\n    };\n    videoElement.addEventListener('loadeddata', setupPreviewVideo);\n  });\n\n  addMouseEventListeners();\n\n  //BEGIN CALLBACK LOOP\n  paused = false;\n  clockStart = performance.now();\n\n  await videoPreviewSetup;\n  await loop();\n}\n\n/**\n * Initializes navigator.mediaDevices.getUserMedia\n * depending on the browser capabilities\n *\n * @return Promise\n */\nfunction setUserMediaVariable(){\n\n  if (navigator.mediaDevices === undefined) {\n    navigator.mediaDevices = {};\n  }\n\n  if (navigator.mediaDevices.getUserMedia === undefined) {\n    navigator.mediaDevices.getUserMedia = function(constraints) {\n\n      // gets the alternative old getUserMedia is possible\n      var getUserMedia = navigator.webkitGetUserMedia || navigator.mozGetUserMedia;\n\n      // set an error message if browser doesn't support getUserMedia\n      if (!getUserMedia) {\n        return Promise.reject(new Error(\"Unfortunately, your browser does not support access to the webcam through the getUserMedia API. Try to use the latest version of Google Chrome, Mozilla Firefox, Opera, or Microsoft Edge instead.\"));\n      }\n\n      // uses navigator.getUserMedia for older browsers\n      return new Promise(function(resolve, reject) {\n        getUserMedia.call(navigator, constraints, resolve, reject);\n      });\n    }\n  }\n}\n\n//PUBLIC FUNCTIONS - CONTROL\n\n/**\n * Starts all state related to webgazer -> dataLoop, video collection, click listener\n * If starting fails, call `onFail` param function.\n * @param {Function} onFail - Callback to call in case it is impossible to find user camera\n * @returns {*}\n */\nwebgazer.begin = function(onFail) {\n  if (window.location.protocol !== 'https:' && window.location.hostname !== 'localhost' && window.chrome){\n    alert(\"WebGazer works only over https. If you are doing local development, you need to run a local server.\");\n  }\n\n  // Load model data stored in localforage.\n  if (webgazer.params.saveDataAcrossSessions) {\n    loadGlobalData();\n  }\n\n  onFail = onFail || function() {console.log('No stream')};\n\n  if (debugVideoLoc) {\n    init(debugVideoLoc);\n    return webgazer;\n  }\n\n  ///////////////////////\n  // SETUP VIDEO ELEMENTS\n  // Sets .mediaDevices.getUserMedia depending on browser\n  setUserMediaVariable();\n\n  // Request webcam access under specific constraints\n  // WAIT for access\n  return new Promise(async (resolve, reject) => {\n    let stream;\n    try {\n      stream = await navigator.mediaDevices.getUserMedia( webgazer.params.camConstraints );\n      await init(stream);\n      resolve(webgazer);\n    } catch(err) {\n      onFail();\n      videoElement = null;\n      stream = null;\n      reject(err);\n    }\n  });\n};\n\n\n/**\n * Checks if webgazer has finished initializing after calling begin()\n * [20180729 JT] This seems like a bad idea for how this function should be implemented.\n * @returns {boolean} if webgazer is ready\n */\nwebgazer.isReady = function() {\n  if (videoElementCanvas === null) {\n    return false;\n  }\n  return videoElementCanvas.width > 0;\n};\n\n/**\n * Stops collection of data and predictions\n * @returns {webgazer} this\n */\nwebgazer.pause = function() {\n  paused = true;\n  return webgazer;\n};\n\n/**\n * Resumes collection of data and predictions if paused\n * @returns {webgazer} this\n */\nwebgazer.resume = async function() {\n  if (!paused) {\n    return webgazer;\n  }\n  paused = false;\n  await loop();\n  return webgazer;\n};\n\n/**\n * stops collection of data and removes dom modifications, must call begin() to reset up\n * @return {webgazer} this\n */\nwebgazer.end = function() {\n  //loop may run an extra time and fail due to removed elements\n  paused = true;\n\n  //webgazer.stopVideo(); // uncomment if you want to stop the video from streaming\n\n  //remove video element and canvas\n  videoContainerElement.remove();\n  gazeDot.remove();\n\n  return webgazer;\n};\n\n/**\n * Stops the video camera from streaming and removes the video outlines\n * @return {webgazer} this\n */\nwebgazer.stopVideo = function() {\n  // Stops the video from streaming\n  videoStream.getTracks()[0].stop();\n\n  // Removes the outline of the face\n  videoContainerElement.removeChild( faceOverlay );\n\n  // Removes the box around the face\n  videoContainerElement.removeChild( faceFeedbackBox );\n\n  return webgazer;\n}\n\n\n//PUBLIC FUNCTIONS - DEBUG\n\n/**\n * Returns if the browser is compatible with webgazer\n * @return {boolean} if browser is compatible\n */\nwebgazer.detectCompatibility = function() {\n\n  var getUserMedia = navigator.mediaDevices.getUserMedia ||\n    navigator.getUserMedia ||\n    navigator.webkitGetUserMedia ||\n    navigator.mozGetUserMedia;\n\n  return getUserMedia !== undefined;\n};\n\n/**\n * Set whether to show any of the video previews (camera, face overlay, feedback box).\n * If true: visibility depends on corresponding params (default all true).\n * If false: camera, face overlay, feedback box are all hidden\n * @param {bool} val\n * @return {webgazer} this\n */\nwebgazer.showVideoPreview = function(val) {\n  webgazer.params.showVideoPreview = val;\n  webgazer.showVideo(val && webgazer.params.showVideo);\n  webgazer.showFaceOverlay(val && webgazer.params.showFaceOverlay);\n  webgazer.showFaceFeedbackBox(val && webgazer.params.showFaceFeedbackBox);\n  return webgazer;\n}\n\n/**\n * hides a video element (videoElement or videoContainerElement)\n * uses display = 'none' for all browsers except Safari, which uses opacity = '1'\n * because Safari optimizes out video element if display = 'none'\n * @param {Object} element\n * @return {null}\n */\nfunction hideVideoElement(val) {\n  if (navigator.vendor && navigator.vendor.indexOf('Apple') > -1) {\n    val.style.opacity = webgazer.params.showVideo ? '1': '0';\n    val.style.display = 'block';\n  } else {\n    val.style.display = webgazer.params.showVideo ? 'block' : 'none';\n  }\n}\n\n/**\n * Set whether the camera video preview is visible or not (default true).\n * @param {*} bool\n * @return {webgazer} this\n */\nwebgazer.showVideo = function(val) {\n  webgazer.params.showVideo = val;\n  if (videoElement) {\n    hideVideoElement(videoElement);\n  }\n  if (videoContainerElement) {\n    hideVideoElement(videoContainerElement);\n  }\n  return webgazer;\n};\n\n/**\n * Set whether the face overlay is visible or not (default true).\n * @param {*} bool\n * @return {webgazer} this\n */\nwebgazer.showFaceOverlay = function(val) {\n  webgazer.params.showFaceOverlay = val;\n  if( faceOverlay ) {\n    faceOverlay.style.display = val ? 'block' : 'none';\n  }\n  return webgazer;\n};\n\n/**\n * Set whether the face feedback box is visible or not (default true).\n * @param {*} bool\n * @return {webgazer} this\n */\nwebgazer.showFaceFeedbackBox = function(val) {\n\n  webgazer.params.showFaceFeedbackBox = val;\n  if( faceFeedbackBox ) {\n    faceFeedbackBox.style.display = val ? 'block' : 'none';\n  }\n  return webgazer;\n};\n\n/**\n * Set whether the gaze prediction point(s) are visible or not.\n * Multiple because of a trail of past dots. Default true\n * @return {webgazer} this\n */\nwebgazer.showPredictionPoints = function(val) {\n  webgazer.params.showGazeDot = val;\n  if( gazeDot ) {\n    gazeDot.style.display = val ? 'block' : 'none';\n  }\n  return webgazer;\n};\n\n/**\n * Set whether previous calibration data (from localforage) should be loaded.\n * Default true.\n *\n * NOTE: Should be called before webgazer.begin() -- see www/js/main.js for example\n *\n * @param val\n * @returns {webgazer} this\n */\nwebgazer.saveDataAcrossSessions = function(val) {\n  webgazer.params.saveDataAcrossSessions = val;\n  return webgazer;\n}\n\n/**\n * Set whether a Kalman filter will be applied to gaze predictions (default true);\n * @return {webgazer} this\n */\nwebgazer.applyKalmanFilter = function(val) {\n  webgazer.params.applyKalmanFilter = val;\n  return webgazer;\n}\n\n/**\n * Define constraints on the video camera that is used. Useful for non-standard setups.\n * This can be set before calling webgazer.begin(), but also mid stream.\n *\n * @param {Object} constraints Example constraints object:\n * { width: { min: 320, ideal: 1280, max: 1920 }, height: { min: 240, ideal: 720, max: 1080 }, facingMode: \"user\" };\n *\n * Follows definition here:\n * https://developer.mozilla.org/en-US/docs/Web/API/Media_Streams_API/Constraints\n *\n * Note: The constraints set here are applied to the video track only. They also _replace_ any constraints, so be sure to set everything you need.\n * Warning: Setting a large video resolution will decrease performance, and may require\n */\nwebgazer.setCameraConstraints = async function(constraints) {\n  var videoTrack,videoSettings;\n  webgazer.params.camConstraints = constraints;\n\n  // If the camera stream is already up...\n  if(videoStream)\n  {\n    webgazer.pause();\n    videoTrack = videoStream.getVideoTracks()[0];\n    try {\n      await videoTrack.applyConstraints( webgazer.params.camConstraints );\n      videoSettings = videoTrack.getSettings();\n      setInternalVideoBufferSizes( videoSettings.width, videoSettings.height );\n    } catch(err) {\n      console.log( err );\n      return;\n    }\n    // Reset and recompute sizes of the video viewer.\n    // This is only to adjust the feedback box, say, if the aspect ratio of the video has changed.\n    webgazer.setVideoViewerSize( webgazer.params.videoViewerWidth, webgazer.params.videoViewerHeight )\n    webgazer.getTracker().reset();\n    await webgazer.resume();\n  }\n}\n\n\n/**\n * Does what it says on the tin.\n * @param {*} width\n * @param {*} height\n */\nfunction setInternalVideoBufferSizes( width, height ) {\n  // Re-set the canvas size used by the internal processes\n  if( videoElementCanvas )\n  {\n    videoElementCanvas.width = width;\n    videoElementCanvas.height = height;\n  }\n\n  // Re-set the face overlay canvas size\n  if( faceOverlay )\n  {\n    faceOverlay.width = width;\n    faceOverlay.height = height;\n  }\n}\n\n/**\n *  Set a static video file to be used instead of webcam video\n *  @param {String} videoLoc - video file location\n *  @return {webgazer} this\n */\nwebgazer.setStaticVideo = function(videoLoc) {\n  debugVideoLoc = videoLoc;\n  return webgazer;\n};\n\n/**\n * Set the size of the video viewer\n */\nwebgazer.setVideoViewerSize = function(w, h) {\n\n  webgazer.params.videoViewerWidth = w;\n  webgazer.params.videoViewerHeight = h;\n\n  // Change the video viewer\n  videoElement.style.width = w + 'px';\n  videoElement.style.height = h + 'px';\n\n  // Change video container\n  videoContainerElement.style.width = w + 'px';\n  videoContainerElement.style.height = h + 'px';\n\n  // Change the face overlay\n  faceOverlay.style.width = w + 'px';\n  faceOverlay.style.height = h + 'px';\n\n  // Change the feedback box size\n  // Compute the boundaries of the face overlay validation box based on the video size\n  var tlwh = webgazer.computeValidationBoxSize()\n  // Assign them to the object\n  faceFeedbackBox.style.top = tlwh[0] + 'px';\n  faceFeedbackBox.style.left = tlwh[1] + 'px';\n  faceFeedbackBox.style.width = tlwh[2] + 'px';\n  faceFeedbackBox.style.height = tlwh[3] + 'px';\n};\n\n/**\n *  Add the mouse click and move listeners that add training data.\n *  @return {webgazer} this\n */\nwebgazer.addMouseEventListeners = function() {\n  addMouseEventListeners();\n  return webgazer;\n};\n\n/**\n *  Remove the mouse click and move listeners that add training data.\n *  @return {webgazer} this\n */\nwebgazer.removeMouseEventListeners = function() {\n  removeMouseEventListeners();\n  return webgazer;\n};\n\n/**\n *  Records current screen position for current pupil features.\n *  @param {String} x - position on screen in the x axis\n *  @param {String} y - position on screen in the y axis\n *  @param {String} eventType - \"click\" or \"move\", as per eventTypes\n *  @return {webgazer} this\n */\nwebgazer.recordScreenPosition = function(x, y, eventType) {\n  // give this the same weight that a click gets.\n  recordScreenPosition(x, y, eventType || eventTypes[0]);\n  return webgazer;\n};\n\n/*\n * Stores the position of the fifty most recent tracker preditions\n */\nwebgazer.storePoints = function(x, y, k) {\n  xPast50[k] = x;\n  yPast50[k] = y;\n}\n\n//SETTERS\n/**\n * Sets the tracking module\n * @param {String} name - The name of the tracking module to use\n * @return {webgazer} this\n */\nwebgazer.setTracker = function(name) {\n  if (curTrackerMap[name] === undefined) {\n    console.log('Invalid tracker selection');\n    console.log('Options are: ');\n    for (var t in curTrackerMap) {\n      console.log(t);\n    }\n    return webgazer;\n  }\n  curTracker = curTrackerMap[name]();\n  return webgazer;\n};\n\n/**\n * Sets the regression module and clears any other regression modules\n * @param {String} name - The name of the regression module to use\n * @return {webgazer} this\n */\nwebgazer.setRegression = function(name) {\n  if (regressionMap[name] === undefined) {\n    console.log('Invalid regression selection');\n    console.log('Options are: ');\n    for (var reg in regressionMap) {\n      console.log(reg);\n    }\n    return webgazer;\n  }\n  data = regs[0].getData();\n  regs = [regressionMap[name]()];\n  regs[0].setData(data);\n  return webgazer;\n};\n\n/**\n * Adds a new tracker module so that it can be used by setTracker()\n * @param {String} name - the new name of the tracker\n * @param {Function} constructor - the constructor of the curTracker object\n * @return {webgazer} this\n */\nwebgazer.addTrackerModule = function(name, constructor) {\n  curTrackerMap[name] = function() {\n    return new constructor();\n  };\n};\n\n/**\n * Adds a new regression module so that it can be used by setRegression() and addRegression()\n * @param {String} name - the new name of the regression\n * @param {Function} constructor - the constructor of the regression object\n */\nwebgazer.addRegressionModule = function(name, constructor) {\n  regressionMap[name] = function() {\n    return new constructor();\n  };\n};\n\n/**\n * Adds a new regression module to the list of regression modules, seeding its data from the first regression module\n * @param {String} name - the string name of the regression module to add\n * @return {webgazer} this\n */\nwebgazer.addRegression = function(name) {\n  var newReg = regressionMap[name]();\n  data = regs[0].getData();\n  newReg.setData(data);\n  regs.push(newReg);\n  return webgazer;\n};\n\n/**\n * Sets a callback to be executed on every gaze event (currently all time steps)\n * @param {function} listener - The callback function to call (it must be like function(data, elapsedTime))\n * @return {webgazer} this\n */\nwebgazer.setGazeListener = function(listener) {\n  callback = listener;\n  return webgazer;\n};\n\n/**\n * Removes the callback set by setGazeListener\n * @return {webgazer} this\n */\nwebgazer.clearGazeListener = function() {\n  callback = nopCallback;\n  return webgazer;\n};\n\n/**\n * Set the video element canvas; useful if you want to run WebGazer on your own canvas (e.g., on any random image).\n * @return The current video element canvas\n */\nwebgazer.setVideoElementCanvas = function(canvas) {\n  videoElementCanvas = canvas;\n  return videoElementCanvas;\n}\n\n/**\n * Clear data from localforage and from regs\n */\nwebgazer.clearData = async function() {\n  clearData();\n}\n\n\n//GETTERS\n/**\n * Returns the tracker currently in use\n * @return {tracker} an object following the tracker interface\n */\nwebgazer.getTracker = function() {\n  return curTracker;\n};\n\n/**\n * Returns the regression currently in use\n * @return {Array.<Object>} an array of regression objects following the regression interface\n */\nwebgazer.getRegression = function() {\n  return regs;\n};\n\n/**\n * Requests an immediate prediction\n * @return {object} prediction data object\n */\nwebgazer.getCurrentPrediction = function(regIndex) {\n  return getPrediction(regIndex);\n};\n\n/**\n * returns the different event types that may be passed to regressions when calling regression.addData()\n * @return {Array} array of strings where each string is an event type\n */\nwebgazer.params.getEventTypes = function() {\n  return eventTypes.slice();\n}\n\n/**\n * Get the video element canvas that WebGazer uses internally on which to run its face tracker.\n * @return The current video element canvas\n */\nwebgazer.getVideoElementCanvas = function() {\n  return videoElementCanvas;\n}\n\n/**\n * @return array [a,b] where a is width ratio and b is height ratio\n */\nwebgazer.getVideoPreviewToCameraResolutionRatio = function() {\n  return [webgazer.params.videoViewerWidth / videoElement.videoWidth, webgazer.params.videoViewerHeight / videoElement.videoHeight];\n}\n\n/*\n * Gets the fifty most recent tracker predictions\n */\nwebgazer.getStoredPoints = function() {\n  return [xPast50, yPast50];\n}\n\nexport default webgazer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}