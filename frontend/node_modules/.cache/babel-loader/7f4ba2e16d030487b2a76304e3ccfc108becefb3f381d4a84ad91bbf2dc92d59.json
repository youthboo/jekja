{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useRef, useCallback } from 'react';\nconst useWebGazer = onGaze => {\n  _s();\n  const [webgazerReady, setWebgazerReady] = useState(false);\n  const webgazerInstance = useRef(null);\n  const initializeWebGazer = useCallback(async () => {\n    try {\n      await window.webgazer.setRegression('ridge').setTracker('clmtrackr').setGazeListener(onGaze).begin();\n      webgazerInstance.current = window.webgazer;\n      setWebgazerReady(true);\n      window.webgazer.showVideo(false);\n      window.webgazer.showFaceOverlay(false);\n      window.webgazer.showFaceFeedbackBox(false);\n    } catch (error) {\n      console.error('Failed to initialize webgazer:', error);\n    }\n  }, [onGaze]);\n  useEffect(() => {\n    initializeWebGazer();\n    return () => {\n      if (webgazerInstance.current && typeof webgazerInstance.current.end === 'function') {\n        try {\n          webgazerInstance.current.end();\n        } catch (error) {\n          console.error('Error while ending webgazer:', error);\n        }\n      }\n    };\n  }, [initializeWebGazer]);\n  return {\n    webgazerReady,\n    webgazerInstance\n  };\n};\n_s(useWebGazer, \"2MLbex3CCygvTErm2K3ulgAAMRk=\");\nexport default useWebGazer;","map":{"version":3,"names":["useState","useEffect","useRef","useCallback","useWebGazer","onGaze","_s","webgazerReady","setWebgazerReady","webgazerInstance","initializeWebGazer","window","webgazer","setRegression","setTracker","setGazeListener","begin","current","showVideo","showFaceOverlay","showFaceFeedbackBox","error","console","end"],"sources":["/Users/aqwerrrx/Desktop/special1/frontend/src/hooks/useWebGazer.js"],"sourcesContent":["import { useState, useEffect, useRef, useCallback } from 'react';\n\nconst useWebGazer = (onGaze) => {\n  const [webgazerReady, setWebgazerReady] = useState(false);\n  const webgazerInstance = useRef(null);\n\n  const initializeWebGazer = useCallback(async () => {\n    try {\n      await window.webgazer.setRegression('ridge').setTracker('clmtrackr')\n        .setGazeListener(onGaze).begin();\n      webgazerInstance.current = window.webgazer;\n      setWebgazerReady(true);\n      \n      window.webgazer.showVideo(false);\n      window.webgazer.showFaceOverlay(false);\n      window.webgazer.showFaceFeedbackBox(false);\n    } catch (error) {\n      console.error('Failed to initialize webgazer:', error);\n    }\n  }, [onGaze]);\n\n  useEffect(() => {\n    initializeWebGazer();\n\n    return () => {\n      if (webgazerInstance.current && typeof webgazerInstance.current.end === 'function') {\n        try {\n          webgazerInstance.current.end();\n        } catch (error) {\n          console.error('Error while ending webgazer:', error);\n        }\n      }\n    };\n  }, [initializeWebGazer]);\n\n  return { webgazerReady, webgazerInstance };\n};\n\nexport default useWebGazer;\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,EAAEC,MAAM,EAAEC,WAAW,QAAQ,OAAO;AAEhE,MAAMC,WAAW,GAAIC,MAAM,IAAK;EAAAC,EAAA;EAC9B,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGR,QAAQ,CAAC,KAAK,CAAC;EACzD,MAAMS,gBAAgB,GAAGP,MAAM,CAAC,IAAI,CAAC;EAErC,MAAMQ,kBAAkB,GAAGP,WAAW,CAAC,YAAY;IACjD,IAAI;MACF,MAAMQ,MAAM,CAACC,QAAQ,CAACC,aAAa,CAAC,OAAO,CAAC,CAACC,UAAU,CAAC,WAAW,CAAC,CACjEC,eAAe,CAACV,MAAM,CAAC,CAACW,KAAK,CAAC,CAAC;MAClCP,gBAAgB,CAACQ,OAAO,GAAGN,MAAM,CAACC,QAAQ;MAC1CJ,gBAAgB,CAAC,IAAI,CAAC;MAEtBG,MAAM,CAACC,QAAQ,CAACM,SAAS,CAAC,KAAK,CAAC;MAChCP,MAAM,CAACC,QAAQ,CAACO,eAAe,CAAC,KAAK,CAAC;MACtCR,MAAM,CAACC,QAAQ,CAACQ,mBAAmB,CAAC,KAAK,CAAC;IAC5C,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;IACxD;EACF,CAAC,EAAE,CAAChB,MAAM,CAAC,CAAC;EAEZJ,SAAS,CAAC,MAAM;IACdS,kBAAkB,CAAC,CAAC;IAEpB,OAAO,MAAM;MACX,IAAID,gBAAgB,CAACQ,OAAO,IAAI,OAAOR,gBAAgB,CAACQ,OAAO,CAACM,GAAG,KAAK,UAAU,EAAE;QAClF,IAAI;UACFd,gBAAgB,CAACQ,OAAO,CAACM,GAAG,CAAC,CAAC;QAChC,CAAC,CAAC,OAAOF,KAAK,EAAE;UACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;QACtD;MACF;IACF,CAAC;EACH,CAAC,EAAE,CAACX,kBAAkB,CAAC,CAAC;EAExB,OAAO;IAAEH,aAAa;IAAEE;EAAiB,CAAC;AAC5C,CAAC;AAACH,EAAA,CAlCIF,WAAW;AAoCjB,eAAeA,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}