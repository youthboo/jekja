{"ast":null,"code":"import util from './util.mjs';\nimport util_regression from './util_regression.mjs';\nimport params from './params.mjs';\nimport mat from './mat.mjs';\nconst reg = {};\nvar ridgeParameter = Math.pow(10, -5);\nvar dataWindow = 700;\nvar weights = {\n  'X': [0],\n  'Y': [0]\n};\nvar trailDataWindow = 10;\n\n/**\n * Constructor of RidgeRegThreaded object,\n * it retrieve data window, and prepare a worker,\n * this object allow to perform threaded ridge regression\n * @constructor\n */\nreg.RidgeRegThreaded = function () {\n  this.init();\n};\n\n/**\n * Initialize new arrays and initialize Kalman filter.\n */\nreg.RidgeRegThreaded.prototype.init = function () {\n  this.screenXClicksArray = new util.DataWindow(dataWindow);\n  this.screenYClicksArray = new util.DataWindow(dataWindow);\n  this.eyeFeaturesClicks = new util.DataWindow(dataWindow);\n  this.screenXTrailArray = new util.DataWindow(trailDataWindow);\n  this.screenYTrailArray = new util.DataWindow(trailDataWindow);\n  this.eyeFeaturesTrail = new util.DataWindow(trailDataWindow);\n  this.dataClicks = new util.DataWindow(dataWindow);\n  this.dataTrail = new util.DataWindow(dataWindow);\n\n  // Place the src/ridgeworker.js file into the same directory as your html file. \n  if (!this.worker) {\n    this.worker = new Worker('ridgeWorker.mjs'); // [20200708] TODO: Figure out how to make this inline \n    this.worker.onerror = function (err) {\n      console.log(err.message);\n    };\n    this.worker.onmessage = function (evt) {\n      weights.X = evt.data.X;\n      weights.Y = evt.data.Y;\n    };\n    console.log('initialized worker');\n  }\n\n  // Initialize Kalman filter [20200608 xk] what do we do about parameters?   \n  // [20200611 xk] unsure what to do w.r.t. dimensionality of these matrices. So far at least \n  //               by my own anecdotal observation a 4x1 x vector seems to work alright   \n  var F = [[1, 0, 1, 0], [0, 1, 0, 1], [0, 0, 1, 0], [0, 0, 0, 1]];\n\n  //Parameters Q and R may require some fine tuning   \n  var Q = [[1 / 4, 0, 1 / 2, 0], [0, 1 / 4, 0, 1 / 2], [1 / 2, 0, 1, 0], [0, 1 / 2, 0, 1]]; // * delta_t  \n  var delta_t = 1 / 10; // The amount of time between frames    \n  Q = mat.multScalar(Q, delta_t);\n  var H = [[1, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0], [0, 0, 0, 1, 0, 0]];\n  var H = [[1, 0, 0, 0], [0, 1, 0, 0]];\n  var pixel_error = 47; //We will need to fine tune this value [20200611 xk] I just put a random value here   \n\n  //This matrix represents the expected measurement error \n  var R = mat.multScalar(mat.identity(2), pixel_error);\n  var P_initial = mat.multScalar(mat.identity(4), 0.0001); //Initial covariance matrix   \n  var x_initial = [[500], [500], [0], [0]]; // Initial measurement matrix \n\n  this.kalman = new util_regression.KalmanFilter(F, H, Q, R, P_initial, x_initial);\n};\n/**\n * Add given data from eyes\n * @param {Object} eyes - eyes where extract data to add\n * @param {Object} screenPos - The current screen point\n * @param {Object} type - The type of performed action\n */\nreg.RidgeRegThreaded.prototype.addData = function (eyes, screenPos, type) {\n  if (!eyes) {\n    return;\n  }\n  //not doing anything with blink at present\n  // if (eyes.left.blink || eyes.right.blink) {\n  //     return;\n  // }\n  this.worker.postMessage({\n    'eyes': util.getEyeFeats(eyes),\n    'screenPos': screenPos,\n    'type': type\n  });\n};\n\n/**\n * Try to predict coordinates from pupil data\n * after apply linear regression on data set\n * @param {Object} eyesObj - The current user eyes object\n * @returns {Object}\n */\nreg.RidgeRegThreaded.prototype.predict = function (eyesObj) {\n  // console.log('LOGGING..');\n  if (!eyesObj) {\n    return null;\n  }\n  var coefficientsX = weights.X;\n  var coefficientsY = weights.Y;\n  var eyeFeats = util.getEyeFeats(eyesObj);\n  var predictedX = 0,\n    predictedY = 0;\n  for (var i = 0; i < eyeFeats.length; i++) {\n    predictedX += eyeFeats[i] * coefficientsX[i];\n    predictedY += eyeFeats[i] * coefficientsY[i];\n  }\n  predictedX = Math.floor(predictedX);\n  predictedY = Math.floor(predictedY);\n  if (params.applyKalmanFilter) {\n    // Update Kalman model, and get prediction\n    var newGaze = [predictedX, predictedY]; // [20200607 xk] Should we use a 1x4 vector?\n    newGaze = this.kalman.update(newGaze);\n    return {\n      x: newGaze[0],\n      y: newGaze[1]\n    };\n  } else {\n    return {\n      x: predictedX,\n      y: predictedY\n    };\n  }\n};\n\n/**\n * Add given data to current data set then,\n * replace current data member with given data\n * @param {Array.<Object>} data - The data to set\n */\nreg.RidgeRegThreaded.prototype.setData = util_regression.setData;\n\n/**\n * Return the data\n * @returns {Array.<Object>|*}\n */\nreg.RidgeRegThreaded.prototype.getData = function () {\n  return this.dataClicks.data;\n};\n\n/**\n * The RidgeRegThreaded object name\n * @type {string}\n */\nreg.RidgeRegThreaded.prototype.name = 'ridge';\nexport default reg;","map":{"version":3,"names":["util","util_regression","params","mat","reg","ridgeParameter","Math","pow","dataWindow","weights","trailDataWindow","RidgeRegThreaded","init","prototype","screenXClicksArray","DataWindow","screenYClicksArray","eyeFeaturesClicks","screenXTrailArray","screenYTrailArray","eyeFeaturesTrail","dataClicks","dataTrail","worker","Worker","onerror","err","console","log","message","onmessage","evt","X","data","Y","F","Q","delta_t","multScalar","H","pixel_error","R","identity","P_initial","x_initial","kalman","KalmanFilter","addData","eyes","screenPos","type","postMessage","getEyeFeats","predict","eyesObj","coefficientsX","coefficientsY","eyeFeats","predictedX","predictedY","i","length","floor","applyKalmanFilter","newGaze","update","x","y","setData","getData","name"],"sources":["/Users/aqwerrrx/Desktop/special1/frontend/node_modules/webgazer/src/ridgeRegThreaded.mjs"],"sourcesContent":["import util from './util.mjs';\nimport util_regression from './util_regression.mjs';\nimport params from './params.mjs';\nimport mat from './mat.mjs';\n\nconst reg = {};\n\nvar ridgeParameter = Math.pow(10,-5);\nvar dataWindow = 700;\nvar weights = {'X':[0],'Y':[0]};\nvar trailDataWindow = 10;\n\n\n/**\n * Constructor of RidgeRegThreaded object,\n * it retrieve data window, and prepare a worker,\n * this object allow to perform threaded ridge regression\n * @constructor\n */\nreg.RidgeRegThreaded = function() {\n    this.init();\n};\n\n/**\n * Initialize new arrays and initialize Kalman filter.\n */\nreg.RidgeRegThreaded.prototype.init = function() { \n    this.screenXClicksArray = new util.DataWindow(dataWindow);  \n    this.screenYClicksArray = new util.DataWindow(dataWindow);  \n    this.eyeFeaturesClicks = new util.DataWindow(dataWindow);   \n\n    this.screenXTrailArray = new util.DataWindow(trailDataWindow);  \n    this.screenYTrailArray = new util.DataWindow(trailDataWindow);  \n    this.eyeFeaturesTrail = new util.DataWindow(trailDataWindow);   \n\n    this.dataClicks = new util.DataWindow(dataWindow);  \n    this.dataTrail = new util.DataWindow(dataWindow);   \n\n    // Place the src/ridgeworker.js file into the same directory as your html file. \n    if (!this.worker) { \n        this.worker = new Worker('ridgeWorker.mjs'); // [20200708] TODO: Figure out how to make this inline \n        this.worker.onerror = function(err) { console.log(err.message); };  \n        this.worker.onmessage = function(evt) { \n            weights.X = evt.data.X; \n            weights.Y = evt.data.Y; \n        };  \n        console.log('initialized worker');  \n    }   \n\n    // Initialize Kalman filter [20200608 xk] what do we do about parameters?   \n    // [20200611 xk] unsure what to do w.r.t. dimensionality of these matrices. So far at least \n    //               by my own anecdotal observation a 4x1 x vector seems to work alright   \n    var F = [ [1, 0, 1, 0], \n              [0, 1, 0, 1], \n              [0, 0, 1, 0], \n              [0, 0, 0, 1]];    \n\n    //Parameters Q and R may require some fine tuning   \n    var Q = [ [1/4, 0,    1/2, 0],  \n              [0,   1/4,  0,   1/2],    \n              [1/2, 0,    1,   0],  \n              [0,  1/2,  0,   1]];// * delta_t  \n    var delta_t = 1/10; // The amount of time between frames    \n    Q = mat.multScalar(Q, delta_t);    \n\n    var H = [ [1, 0, 0, 0, 0, 0],   \n              [0, 1, 0, 0, 0, 0],   \n              [0, 0, 1, 0, 0, 0],   \n              [0, 0, 0, 1, 0, 0]];  \n    var H = [ [1, 0, 0, 0], \n              [0, 1, 0, 0]];    \n    var pixel_error = 47; //We will need to fine tune this value [20200611 xk] I just put a random value here   \n\n    //This matrix represents the expected measurement error \n    var R = mat.multScalar(mat.identity(2), pixel_error);  \n\n    var P_initial = mat.multScalar(mat.identity(4), 0.0001); //Initial covariance matrix   \n    var x_initial = [[500], [500], [0], [0]]; // Initial measurement matrix \n\n    this.kalman = new util_regression.KalmanFilter(F, H, Q, R, P_initial, x_initial);  \n}\n/**\n * Add given data from eyes\n * @param {Object} eyes - eyes where extract data to add\n * @param {Object} screenPos - The current screen point\n * @param {Object} type - The type of performed action\n */\nreg.RidgeRegThreaded.prototype.addData = function(eyes, screenPos, type) {\n    if (!eyes) {\n        return;\n    }\n    //not doing anything with blink at present\n    // if (eyes.left.blink || eyes.right.blink) {\n    //     return;\n    // }\n    this.worker.postMessage({'eyes':util.getEyeFeats(eyes), 'screenPos':screenPos, 'type':type});\n};\n\n/**\n * Try to predict coordinates from pupil data\n * after apply linear regression on data set\n * @param {Object} eyesObj - The current user eyes object\n * @returns {Object}\n */\nreg.RidgeRegThreaded.prototype.predict = function(eyesObj) {\n    // console.log('LOGGING..');\n    if (!eyesObj) {\n        return null;\n    }\n    var coefficientsX = weights.X;\n    var coefficientsY = weights.Y;\n\n    var eyeFeats = util.getEyeFeats(eyesObj);\n    var predictedX = 0, predictedY = 0;\n    for(var i=0; i< eyeFeats.length; i++){\n        predictedX += eyeFeats[i] * coefficientsX[i];\n        predictedY += eyeFeats[i] * coefficientsY[i];\n    }\n\n    predictedX = Math.floor(predictedX);\n    predictedY = Math.floor(predictedY);\n\n    if (params.applyKalmanFilter) {\n        // Update Kalman model, and get prediction\n        var newGaze = [predictedX, predictedY]; // [20200607 xk] Should we use a 1x4 vector?\n        newGaze = this.kalman.update(newGaze);\n\n        return {\n            x: newGaze[0],\n            y: newGaze[1]\n        };\n    } else {\n        return {\n            x: predictedX,\n            y: predictedY\n        };\n    }\n};\n\n/**\n * Add given data to current data set then,\n * replace current data member with given data\n * @param {Array.<Object>} data - The data to set\n */\nreg.RidgeRegThreaded.prototype.setData = util_regression.setData\n\n/**\n * Return the data\n * @returns {Array.<Object>|*}\n */\nreg.RidgeRegThreaded.prototype.getData = function() {\n    return this.dataClicks.data;\n};\n\n/**\n * The RidgeRegThreaded object name\n * @type {string}\n */\nreg.RidgeRegThreaded.prototype.name = 'ridge';\n\nexport default reg;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}