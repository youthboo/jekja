{"ast":null,"code":"var _jsxFileName = \"/Users/aqwerrrx/Desktop/special1/frontend/src/components/CalibrationOverlay.js\",\n  _s = $RefreshSig$();\n// src/components/CalibrationOverlay.js\nimport React, { useState, useCallback } from 'react';\nimport './CalibrationOverlay.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst generateCalibrationPoints = () => {\n  const positions = [{\n    x: 10,\n    y: 20\n  }, {\n    x: 10,\n    y: 35\n  }, {\n    x: 10,\n    y: 50\n  }, {\n    x: 10,\n    y: 65\n  }, {\n    x: 10,\n    y: 80\n  }, {\n    x: 10,\n    y: 95\n  }, {\n    x: 30,\n    y: 50\n  }, {\n    x: 50,\n    y: 50\n  }, {\n    x: 70,\n    y: 50\n  }, {\n    x: 90,\n    y: 50\n  }, {\n    x: 30,\n    y: 65\n  }, {\n    x: 50,\n    y: 65\n  }, {\n    x: 70,\n    y: 65\n  }, {\n    x: 90,\n    y: 65\n  }, {\n    x: 30,\n    y: 85\n  }, {\n    x: 50,\n    y: 85\n  }, {\n    x: 70,\n    y: 85\n  }, {\n    x: 95,\n    y: 30\n  }, {\n    x: 87,\n    y: 3\n  }];\n  return positions.map(pos => ({\n    x: `${pos.x}%`,\n    y: `${pos.y}%`\n  }));\n};\nconst CalibrationOverlay = ({\n  onCalibrationComplete\n}) => {\n  _s();\n  const [calibrationCount, setCalibrationCount] = useState(0);\n  const [color, setColor] = useState('initialColor');\n  const points = generateCalibrationPoints();\n  const handleCalibrationClick = useCallback(() => {\n    setCalibrationCount(prev => {\n      const newCount = prev + 1;\n      if (newCount >= 3) {\n        setColor('newColor');\n        if (onCalibrationComplete) onCalibrationComplete();\n      }\n      return newCount;\n    });\n  }, [onCalibrationComplete]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"calibration-overlay\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"calibration-grid\",\n      children: points.map((point, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"calibration-point\",\n        style: {\n          left: point.x,\n          top: point.y\n        },\n        onClick: handleCalibrationClick\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: `calibrate-button ${color}`,\n      onClick: handleCalibrationClick,\n      children: \"Calibrate\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n};\n_s(CalibrationOverlay, \"2SpVlMOsKGMRPmNP0JFwZaUlZ1E=\");\n_c = CalibrationOverlay;\nexport default CalibrationOverlay;\nvar _c;\n$RefreshReg$(_c, \"CalibrationOverlay\");","map":{"version":3,"names":["React","useState","useCallback","jsxDEV","_jsxDEV","generateCalibrationPoints","positions","x","y","map","pos","CalibrationOverlay","onCalibrationComplete","_s","calibrationCount","setCalibrationCount","color","setColor","points","handleCalibrationClick","prev","newCount","className","children","point","index","style","left","top","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/aqwerrrx/Desktop/special1/frontend/src/components/CalibrationOverlay.js"],"sourcesContent":["// src/components/CalibrationOverlay.js\nimport React, { useState, useCallback } from 'react';\nimport './CalibrationOverlay.css';\n\nconst generateCalibrationPoints = () => {\n  const positions = [\n    { x: 10, y: 20 }, { x: 10, y: 35 }, { x: 10, y: 50 }, { x: 10, y: 65 }, { x: 10, y: 80 },\n    { x: 10, y: 95 }, { x: 30, y: 50 }, { x: 50, y: 50 }, { x: 70, y: 50 }, { x: 90, y: 50 },\n    { x: 30, y: 65 }, { x: 50, y: 65 }, { x: 70, y: 65 }, { x: 90, y: 65 }, { x: 30, y: 85 },\n    { x: 50, y: 85 }, { x: 70, y: 85 }, { x: 95, y: 30 }, { x: 87, y: 3 },\n  ];\n  return positions.map(pos => ({ x: `${pos.x}%`, y: `${pos.y}%` }));\n};\n\nconst CalibrationOverlay = ({ onCalibrationComplete }) => {\n  const [calibrationCount, setCalibrationCount] = useState(0);\n  const [color, setColor] = useState('initialColor');\n\n  const points = generateCalibrationPoints();\n\n  const handleCalibrationClick = useCallback(() => {\n    setCalibrationCount(prev => {\n      const newCount = prev + 1;\n      if (newCount >= 3) {\n        setColor('newColor');\n        if (onCalibrationComplete) onCalibrationComplete();\n      }\n      return newCount;\n    });\n  }, [onCalibrationComplete]);\n\n  return (\n    <div className=\"calibration-overlay\">\n      <div className=\"calibration-grid\">\n        {points.map((point, index) => (\n          <div\n            key={index}\n            className=\"calibration-point\"\n            style={{ left: point.x, top: point.y }}\n            onClick={handleCalibrationClick}\n          />\n        ))}\n      </div>\n      <button \n        className={`calibrate-button ${color}`}\n        onClick={handleCalibrationClick}\n      >\n        Calibrate\n      </button>\n    </div>\n  );\n};\n\nexport default CalibrationOverlay;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}