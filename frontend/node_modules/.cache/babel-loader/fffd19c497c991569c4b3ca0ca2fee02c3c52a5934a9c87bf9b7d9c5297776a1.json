{"ast":null,"code":"import util from './util.mjs';\nimport util_regression from './util_regression.mjs';\nimport params from './params.mjs';\nconst reg = {};\n\n/**\n * Constructor of RidgeWeightedReg object\n * @constructor\n */\nreg.RidgeWeightedReg = function () {\n  this.init();\n};\n\n/**\n * Initialize new arrays and initialize Kalman filter.\n */\nreg.RidgeWeightedReg.prototype.init = util_regression.InitRegression;\n\n/**\n * Add given data from eyes\n * @param {Object} eyes - eyes where extract data to add\n * @param {Object} screenPos - The current screen point\n * @param {Object} type - The type of performed action\n */\nreg.RidgeWeightedReg.prototype.addData = util_regression.addData;\n\n/**\n * Try to predict coordinates from pupil data\n * after apply linear regression on data set\n * @param {Object} eyesObj - The current user eyes object\n * @returns {Object}\n */\nreg.RidgeWeightedReg.prototype.predict = function (eyesObj) {\n  if (!eyesObj || this.eyeFeaturesClicks.length === 0) {\n    return null;\n  }\n  var acceptTime = performance.now() - this.trailTime;\n  var trailX = [];\n  var trailY = [];\n  var trailFeat = [];\n  for (var i = 0; i < this.trailDataWindow; i++) {\n    if (this.trailTimes.get(i) > acceptTime) {\n      trailX.push(this.screenXTrailArray.get(i));\n      trailY.push(this.screenYTrailArray.get(i));\n      trailFeat.push(this.eyeFeaturesTrail.get(i));\n    }\n  }\n  var len = this.eyeFeaturesClicks.data.length;\n  var weightedEyeFeats = Array(len);\n  var weightedXArray = Array(len);\n  var weightedYArray = Array(len);\n  for (var i = 0; i < len; i++) {\n    var weight = Math.sqrt(1 / (len - i)); // access from oldest to newest so should start with low weight and increase steadily\n    //abstraction is leaking...\n    var trueIndex = this.eyeFeaturesClicks.getTrueIndex(i);\n    for (var j = 0; j < this.eyeFeaturesClicks.data[trueIndex].length; j++) {\n      var val = this.eyeFeaturesClicks.data[trueIndex][j] * weight;\n      if (weightedEyeFeats[trueIndex] !== undefined) {\n        weightedEyeFeats[trueIndex].push(val);\n      } else {\n        weightedEyeFeats[trueIndex] = [val];\n      }\n    }\n    weightedXArray[i] = this.screenXClicksArray.get(i).slice(0, this.screenXClicksArray.get(i).length);\n    weightedYArray[i] = this.screenYClicksArray.get(i).slice(0, this.screenYClicksArray.get(i).length);\n    weightedXArray[i][0] = weightedXArray[i][0] * weight;\n    weightedYArray[i][0] = weightedYArray[i][0] * weight;\n  }\n  var screenXArray = weightedXArray.concat(trailX);\n  var screenYArray = weightedYArray.concat(trailY);\n  var eyeFeatures = weightedEyeFeats.concat(trailFeat);\n  var coefficientsX = util_regression.ridge(screenXArray, eyeFeatures, this.ridgeParameter);\n  var coefficientsY = util_regression.ridge(screenYArray, eyeFeatures, this.ridgeParameter);\n  var eyeFeats = util.getEyeFeats(eyesObj);\n  var predictedX = 0;\n  for (var i = 0; i < eyeFeats.length; i++) {\n    predictedX += eyeFeats[i] * coefficientsX[i];\n  }\n  var predictedY = 0;\n  for (var i = 0; i < eyeFeats.length; i++) {\n    predictedY += eyeFeats[i] * coefficientsY[i];\n  }\n  predictedX = Math.floor(predictedX);\n  predictedY = Math.floor(predictedY);\n  if (params.applyKalmanFilter) {\n    // Update Kalman model, and get prediction\n    var newGaze = [predictedX, predictedY]; // [20200607 xk] Should we use a 1x4 vector?\n    newGaze = this.kalman.update(newGaze);\n    return {\n      x: newGaze[0],\n      y: newGaze[1]\n    };\n  } else {\n    return {\n      x: predictedX,\n      y: predictedY\n    };\n  }\n};\nreg.RidgeWeightedReg.prototype.setData = util_regression.setData;\n\n/**\n * Return the data\n * @returns {Array.<Object>|*}\n */\nreg.RidgeWeightedReg.prototype.getData = function () {\n  return this.dataClicks.data;\n};\n\n/**\n * The RidgeWeightedReg object name\n * @type {string}\n */\nreg.RidgeWeightedReg.prototype.name = 'ridgeWeighted';\nexport default reg;","map":{"version":3,"names":["util","util_regression","params","reg","RidgeWeightedReg","init","prototype","InitRegression","addData","predict","eyesObj","eyeFeaturesClicks","length","acceptTime","performance","now","trailTime","trailX","trailY","trailFeat","i","trailDataWindow","trailTimes","get","push","screenXTrailArray","screenYTrailArray","eyeFeaturesTrail","len","data","weightedEyeFeats","Array","weightedXArray","weightedYArray","weight","Math","sqrt","trueIndex","getTrueIndex","j","val","undefined","screenXClicksArray","slice","screenYClicksArray","screenXArray","concat","screenYArray","eyeFeatures","coefficientsX","ridge","ridgeParameter","coefficientsY","eyeFeats","getEyeFeats","predictedX","predictedY","floor","applyKalmanFilter","newGaze","kalman","update","x","y","setData","getData","dataClicks","name"],"sources":["/Users/aqwerrrx/Desktop/special1/frontend/node_modules/webgazer/src/ridgeWeightedReg.mjs"],"sourcesContent":["import util from './util.mjs';\nimport util_regression from './util_regression.mjs';\nimport params from './params.mjs';\n\nconst reg = {};\n\n/**\n * Constructor of RidgeWeightedReg object\n * @constructor\n */\nreg.RidgeWeightedReg = function() {\n    this.init();\n};\n\n/**\n * Initialize new arrays and initialize Kalman filter.\n */\nreg.RidgeWeightedReg.prototype.init = util_regression.InitRegression\n\n/**\n * Add given data from eyes\n * @param {Object} eyes - eyes where extract data to add\n * @param {Object} screenPos - The current screen point\n * @param {Object} type - The type of performed action\n */\nreg.RidgeWeightedReg.prototype.addData = util_regression.addData\n\n/**\n * Try to predict coordinates from pupil data\n * after apply linear regression on data set\n * @param {Object} eyesObj - The current user eyes object\n * @returns {Object}\n */\nreg.RidgeWeightedReg.prototype.predict = function(eyesObj) {\n    if (!eyesObj || this.eyeFeaturesClicks.length === 0) {\n        return null;\n    }\n    var acceptTime = performance.now() - this.trailTime;\n    var trailX = [];\n    var trailY = [];\n    var trailFeat = [];\n    for (var i = 0; i < this.trailDataWindow; i++) {\n        if (this.trailTimes.get(i) > acceptTime) {\n            trailX.push(this.screenXTrailArray.get(i));\n            trailY.push(this.screenYTrailArray.get(i));\n            trailFeat.push(this.eyeFeaturesTrail.get(i));\n        }\n    }\n\n    var len = this.eyeFeaturesClicks.data.length;\n    var weightedEyeFeats = Array(len);\n    var weightedXArray = Array(len);\n    var weightedYArray = Array(len);\n    for (var i = 0; i < len; i++) {\n        var weight = Math.sqrt( 1 / (len - i) ); // access from oldest to newest so should start with low weight and increase steadily\n        //abstraction is leaking...\n        var trueIndex = this.eyeFeaturesClicks.getTrueIndex(i);\n        for (var j = 0; j < this.eyeFeaturesClicks.data[trueIndex].length; j++) {\n            var val = this.eyeFeaturesClicks.data[trueIndex][j] * weight;\n            if (weightedEyeFeats[trueIndex] !== undefined){\n                weightedEyeFeats[trueIndex].push(val);\n            } else {\n                weightedEyeFeats[trueIndex] = [val];\n            }\n        }\n        weightedXArray[i] = this.screenXClicksArray.get(i).slice(0, this.screenXClicksArray.get(i).length);\n        weightedYArray[i] = this.screenYClicksArray.get(i).slice(0, this.screenYClicksArray.get(i).length);\n        weightedXArray[i][0] = weightedXArray[i][0] * weight;\n        weightedYArray[i][0] = weightedYArray[i][0] * weight;\n    }\n\n    var screenXArray = weightedXArray.concat(trailX);\n    var screenYArray = weightedYArray.concat(trailY);\n    var eyeFeatures = weightedEyeFeats.concat(trailFeat);\n\n    var coefficientsX = util_regression.ridge(screenXArray, eyeFeatures, this.ridgeParameter);\n    var coefficientsY = util_regression.ridge(screenYArray, eyeFeatures, this.ridgeParameter);\n\n    var eyeFeats = util.getEyeFeats(eyesObj);\n    var predictedX = 0;\n    for(var i=0; i< eyeFeats.length; i++){\n        predictedX += eyeFeats[i] * coefficientsX[i];\n    }\n    var predictedY = 0;\n    for(var i=0; i< eyeFeats.length; i++){\n        predictedY += eyeFeats[i] * coefficientsY[i];\n    }\n\n    predictedX = Math.floor(predictedX);\n    predictedY = Math.floor(predictedY);\n\n    if (params.applyKalmanFilter) {\n        // Update Kalman model, and get prediction\n        var newGaze = [predictedX, predictedY]; // [20200607 xk] Should we use a 1x4 vector?\n        newGaze = this.kalman.update(newGaze);\n\n        return {\n            x: newGaze[0],\n            y: newGaze[1]\n        };\n    } else {\n        return {\n            x: predictedX,\n            y: predictedY\n        };\n    }\n};\n\nreg.RidgeWeightedReg.prototype.setData = util_regression.setData;\n\n/**\n * Return the data\n * @returns {Array.<Object>|*}\n */\nreg.RidgeWeightedReg.prototype.getData = function() {\n    return this.dataClicks.data;\n};\n\n/**\n * The RidgeWeightedReg object name\n * @type {string}\n */\nreg.RidgeWeightedReg.prototype.name = 'ridgeWeighted';\n\nexport default reg;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}